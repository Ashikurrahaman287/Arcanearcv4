{"file_contents":{"client/src/pages/Learning.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Library, ExternalLink, Video, FileText, Link2 } from \"lucide-react\";\nimport { Resource } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst categoryColors: Record<string, string> = {\n  \"Self-Discipline\": \"bg-chart-1/10 text-chart-1\",\n  \"Health\": \"bg-chart-2/10 text-chart-2\",\n  \"Business\": \"bg-chart-3/10 text-chart-3\",\n  \"Mindfulness\": \"bg-chart-4/10 text-chart-4\",\n};\n\nconst typeIcons = {\n  video: Video,\n  pdf: FileText,\n  article: Link2,\n};\n\nexport default function Learning() {\n  const { data: resources, isLoading } = useQuery<Resource[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n        </div>\n      </div>\n    );\n  }\n\n  const categories = [\"Self-Discipline\", \"Health\", \"Business\", \"Mindfulness\"];\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-learning-title\">\n          Learning Hub\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Curated resources to support your transformation journey\n        </p>\n      </div>\n\n      {categories.map((category) => {\n        const categoryResources = resources?.filter(r => r.category === category) || [];\n\n        if (categoryResources.length === 0) return null;\n\n        return (\n          <div key={category}>\n            <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\n              <Library className=\"h-6 w-6 text-primary\" />\n              {category}\n            </h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {categoryResources.map((resource) => {\n                const TypeIcon = typeIcons[resource.type as keyof typeof typeIcons] || Link2;\n\n                return (\n                  <Card key={resource.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-resource-${resource.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg mb-2\">{resource.title}</CardTitle>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className={categoryColors[category] || \"bg-muted\"}>\n                              {category}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"capitalize\">\n                              <TypeIcon className=\"h-3 w-3 mr-1\" />\n                              {resource.type}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-muted-foreground\">{resource.description}</p>\n                      <a href={resource.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Button variant=\"outline\" className=\"w-full hover-elevate active-elevate-2\" data-testid={`button-resource-${resource.id}`}>\n                          Access Resource\n                          <ExternalLink className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </a>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n\n      {resources?.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Library className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No resources available yet. Check back soon!</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4356},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { getAuthState, isAdmin } from \"@/lib/auth\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n}\n\nexport function ProtectedRoute({ children, requireAdmin = false }: ProtectedRouteProps) {\n  const [, setLocation] = useLocation();\n  const { user, token } = getAuthState();\n\n  useEffect(() => {\n    if (!token || !user) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    if (requireAdmin && !isAdmin(user)) {\n      setLocation(\"/dashboard\");\n      return;\n    }\n  }, [token, user, requireAdmin, setLocation]);\n\n  if (!token || !user) {\n    return null;\n  }\n\n  if (requireAdmin && !isAdmin(user)) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":768},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/AdminChallenges.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Target, Plus } from \"lucide-react\";\nimport { Challenge, Week } from \"@shared/schema\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ChallengeWithWeek extends Challenge {\n  week: Week;\n}\n\nexport default function AdminChallenges() {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    weekId: \"\",\n    title: \"\",\n    description: \"\",\n    type: \"daily\",\n  });\n\n  const { data: challenges, isLoading: challengesLoading } = useQuery<ChallengeWithWeek[]>({\n    queryKey: [\"/api/admin/challenges\"],\n  });\n\n  const { data: weeks } = useQuery<Week[]>({\n    queryKey: [\"/api/weeks\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/challenges\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/challenges\"] });\n      toast({\n        title: \"Challenge created!\",\n        description: \"The new challenge has been added to the program.\",\n      });\n      setFormData({ weekId: \"\", title: \"\", description: \"\", type: \"daily\" });\n      setShowForm(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (challengesLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-challenges-admin-title\">\n            Challenge Management\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Create and manage program challenges\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowForm(!showForm)}\n          className=\"hover-elevate active-elevate-2\"\n          data-testid=\"button-create-challenge\"\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Challenge\n        </Button>\n      </div>\n\n      {/* Create Form */}\n      {showForm && (\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>New Challenge</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                createMutation.mutate();\n              }}\n              className=\"space-y-4\"\n            >\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"weekId\">Week</Label>\n                <Select value={formData.weekId} onValueChange={(value) => setFormData({ ...formData, weekId: value })}>\n                  <SelectTrigger id=\"weekId\" className=\"h-12\" data-testid=\"select-week\">\n                    <SelectValue placeholder=\"Select week\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {weeks?.map((week) => (\n                      <SelectItem key={week.id} value={week.id}>\n                        Week {week.weekNumber} - {week.title}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Challenge Title</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Enter challenge title\"\n                  required\n                  className=\"h-12\"\n                  data-testid=\"input-challenge-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Describe the challenge...\"\n                  required\n                  className=\"min-h-24\"\n                  data-testid=\"input-challenge-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Type</Label>\n                <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value })}>\n                  <SelectTrigger id=\"type\" className=\"h-12\" data-testid=\"select-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"daily\">Daily</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 hover-elevate active-elevate-2\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-challenge\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Challenge\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowForm(false)}\n                  className=\"hover-elevate active-elevate-2\"\n                  data-testid=\"button-cancel-challenge\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Challenges List */}\n      <div className=\"space-y-4\">\n        {challenges && challenges.length > 0 ? (\n          challenges.map((challenge) => (\n            <Card key={challenge.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-challenge-${challenge.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-primary/10 text-primary font-medium\">\n                        Week {challenge.week.weekNumber}\n                      </span>\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-muted capitalize\">\n                        {challenge.type}\n                      </span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\">{challenge.title}</h3>\n                    <p className=\"text-muted-foreground\">{challenge.description}</p>\n                  </div>\n                  <Target className=\"h-6 w-6 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No challenges created yet</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8059},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initial = stored || \"light\";\n    setTheme(initial);\n    document.documentElement.classList.toggle(\"dark\", initial === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate active-elevate-2\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1050},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/storage.ts":{"content":"// Referenced from javascript_database blueprint - adapted for Arcane Arc schema\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, count, sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport type {\n  User,\n  InsertUser,\n  Week,\n  InsertWeek,\n  Challenge,\n  InsertChallenge,\n  Journal,\n  InsertJournal,\n  Resource,\n  InsertResource,\n  Announcement,\n  InsertAnnouncement,\n  Achievement,\n  InsertAchievement,\n  UserChallenge,\n  InsertUserChallenge,\n  UserProgress,\n  InsertUserProgress,\n  UserAchievement,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserStreak(userId: string, streak: number): Promise<void>;\n  updateUserWeek(userId: string, week: number): Promise<void>;\n  incrementUserJournals(userId: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n  getActiveUsers(since: Date): Promise<User[]>;\n\n  // Weeks\n  getAllWeeks(): Promise<Week[]>;\n  getWeek(id: string): Promise<Week | undefined>;\n  createWeek(week: InsertWeek): Promise<Week>;\n\n  // Challenges\n  getAllChallenges(): Promise<Challenge[]>;\n  getChallengesByWeek(weekId: string): Promise<Challenge[]>;\n  getChallenge(id: string): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n\n  // User Challenges\n  getUserChallenge(userId: string, challengeId: string): Promise<UserChallenge | undefined>;\n  createUserChallenge(userChallenge: InsertUserChallenge): Promise<UserChallenge>;\n  updateUserChallenge(id: string, completed: boolean, completedAt: Date | null): Promise<void>;\n  getUserChallengesByUser(userId: string): Promise<UserChallenge[]>;\n  getCompletedChallengesCount(userId: string): Promise<number>;\n\n  // Journals\n  getJournalsByUser(userId: string): Promise<Journal[]>;\n  getTodayJournal(userId: string): Promise<Journal | null>;\n  createJournal(journal: InsertJournal): Promise<Journal>;\n  getTotalJournalsCount(): Promise<number>;\n\n  // Resources\n  getAllResources(): Promise<Resource[]>;\n  createResource(resource: InsertResource): Promise<Resource>;\n\n  // Announcements\n  getAllAnnouncements(): Promise<Announcement[]>;\n  getRecentAnnouncements(limit: number): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n\n  // Achievements\n  getAllAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  getUserAchievements(userId: string): Promise<UserAchievement[]>;\n  addUserAchievement(userId: string, achievementId: string): Promise<UserAchievement>;\n\n  // User Progress\n  getUserProgress(userId: string): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(id: string, completed: boolean, completedAt: Date | null): Promise<void>;\n  getCompletedWeeksCount(userId: string): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(schema.users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUserStreak(userId: string, streak: number): Promise<void> {\n    await db.update(schema.users).set({ streak }).where(eq(schema.users.id, userId));\n  }\n\n  async updateUserWeek(userId: string, week: number): Promise<void> {\n    await db.update(schema.users).set({ currentWeek: week }).where(eq(schema.users.id, userId));\n  }\n\n  async incrementUserJournals(userId: string): Promise<void> {\n    await db.update(schema.users).set({ totalJournals: sql`${schema.users.totalJournals} + 1` }).where(eq(schema.users.id, userId));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(schema.users).orderBy(desc(schema.users.createdAt));\n  }\n\n  async getActiveUsers(since: Date): Promise<User[]> {\n    const journals = await db.select({ userId: schema.journals.userId })\n      .from(schema.journals)\n      .where(gte(schema.journals.createdAt, since))\n      .groupBy(schema.journals.userId);\n    \n    const userIds = journals.map(j => j.userId);\n    if (userIds.length === 0) return [];\n\n    return await db.select().from(schema.users).where(sql`${schema.users.id} IN (${sql.join(userIds.map(id => sql`${id}`), sql`, `)})`);\n  }\n\n  // Weeks\n  async getAllWeeks(): Promise<Week[]> {\n    return await db.select().from(schema.weeks).orderBy(schema.weeks.weekNumber);\n  }\n\n  async getWeek(id: string): Promise<Week | undefined> {\n    const [week] = await db.select().from(schema.weeks).where(eq(schema.weeks.id, id));\n    return week || undefined;\n  }\n\n  async createWeek(week: InsertWeek): Promise<Week> {\n    const [created] = await db.insert(schema.weeks).values(week).returning();\n    return created;\n  }\n\n  // Challenges\n  async getAllChallenges(): Promise<Challenge[]> {\n    return await db.select().from(schema.challenges).orderBy(desc(schema.challenges.createdAt));\n  }\n\n  async getChallengesByWeek(weekId: string): Promise<Challenge[]> {\n    return await db.select().from(schema.challenges).where(eq(schema.challenges.weekId, weekId));\n  }\n\n  async getChallenge(id: string): Promise<Challenge | undefined> {\n    const [challenge] = await db.select().from(schema.challenges).where(eq(schema.challenges.id, id));\n    return challenge || undefined;\n  }\n\n  async createChallenge(challenge: InsertChallenge): Promise<Challenge> {\n    const [created] = await db.insert(schema.challenges).values(challenge).returning();\n    return created;\n  }\n\n  // User Challenges\n  async getUserChallenge(userId: string, challengeId: string): Promise<UserChallenge | undefined> {\n    const [userChallenge] = await db.select()\n      .from(schema.userChallenges)\n      .where(and(eq(schema.userChallenges.userId, userId), eq(schema.userChallenges.challengeId, challengeId)));\n    return userChallenge || undefined;\n  }\n\n  async createUserChallenge(userChallenge: InsertUserChallenge): Promise<UserChallenge> {\n    const [created] = await db.insert(schema.userChallenges).values(userChallenge).returning();\n    return created;\n  }\n\n  async updateUserChallenge(id: string, completed: boolean, completedAt: Date | null): Promise<void> {\n    await db.update(schema.userChallenges).set({ completed, completedAt }).where(eq(schema.userChallenges.id, id));\n  }\n\n  async getUserChallengesByUser(userId: string): Promise<UserChallenge[]> {\n    return await db.select().from(schema.userChallenges).where(eq(schema.userChallenges.userId, userId));\n  }\n\n  async getCompletedChallengesCount(userId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(schema.userChallenges)\n      .where(and(eq(schema.userChallenges.userId, userId), eq(schema.userChallenges.completed, true)));\n    return result[0]?.count || 0;\n  }\n\n  // Journals\n  async getJournalsByUser(userId: string): Promise<Journal[]> {\n    return await db.select().from(schema.journals).where(eq(schema.journals.userId, userId)).orderBy(desc(schema.journals.date));\n  }\n\n  async getTodayJournal(userId: string): Promise<Journal | null> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [journal] = await db.select()\n      .from(schema.journals)\n      .where(and(\n        eq(schema.journals.userId, userId),\n        gte(schema.journals.date, today),\n        sql`${schema.journals.date} < ${tomorrow}`\n      ));\n    return journal || null;\n  }\n\n  async createJournal(journal: InsertJournal): Promise<Journal> {\n    const [created] = await db.insert(schema.journals).values(journal).returning();\n    return created;\n  }\n\n  async getTotalJournalsCount(): Promise<number> {\n    const result = await db.select({ count: count() }).from(schema.journals);\n    return result[0]?.count || 0;\n  }\n\n  // Resources\n  async getAllResources(): Promise<Resource[]> {\n    return await db.select().from(schema.resources).orderBy(desc(schema.resources.createdAt));\n  }\n\n  async createResource(resource: InsertResource): Promise<Resource> {\n    const [created] = await db.insert(schema.resources).values(resource).returning();\n    return created;\n  }\n\n  // Announcements\n  async getAllAnnouncements(): Promise<Announcement[]> {\n    return await db.select().from(schema.announcements).orderBy(desc(schema.announcements.createdAt));\n  }\n\n  async getRecentAnnouncements(limit: number): Promise<Announcement[]> {\n    return await db.select().from(schema.announcements).orderBy(desc(schema.announcements.createdAt)).limit(limit);\n  }\n\n  async createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement> {\n    const [created] = await db.insert(schema.announcements).values(announcement).returning();\n    return created;\n  }\n\n  // Achievements\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db.select().from(schema.achievements);\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [created] = await db.insert(schema.achievements).values(achievement).returning();\n    return created;\n  }\n\n  async getUserAchievements(userId: string): Promise<UserAchievement[]> {\n    return await db.select().from(schema.userAchievements).where(eq(schema.userAchievements.userId, userId));\n  }\n\n  async addUserAchievement(userId: string, achievementId: string): Promise<UserAchievement> {\n    const [created] = await db.insert(schema.userAchievements).values({ userId, achievementId }).returning();\n    return created;\n  }\n\n  // User Progress\n  async getUserProgress(userId: string): Promise<UserProgress[]> {\n    return await db.select().from(schema.userProgress).where(eq(schema.userProgress.userId, userId));\n  }\n\n  async createUserProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    const [created] = await db.insert(schema.userProgress).values(progress).returning();\n    return created;\n  }\n\n  async updateUserProgress(id: string, completed: boolean, completedAt: Date | null): Promise<void> {\n    await db.update(schema.userProgress).set({ completed, completedAt }).where(eq(schema.userProgress.id, id));\n  }\n\n  async getCompletedWeeksCount(userId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(schema.userProgress)\n      .where(and(eq(schema.userProgress.userId, userId), eq(schema.userProgress.completed, true)));\n    return result[0]?.count || 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11215},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getAuthState } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport {\n  Flame,\n  BookOpen,\n  Target,\n  Trophy,\n  TrendingUp,\n  Calendar,\n  CheckCircle2,\n  ArrowRight,\n} from \"lucide-react\";\nimport { User, Week, Journal, UserChallenge, Challenge, Announcement } from \"@shared/schema\";\n\ninterface DashboardData {\n  user: User;\n  weeks: Week[];\n  todayJournal: Journal | null;\n  recentJournals: Journal[];\n  activeChallenges: (UserChallenge & { challenge: Challenge })[];\n  announcements: Announcement[];\n}\n\nexport default function Dashboard() {\n  const { user } = getAuthState();\n\n  const { data, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  if (isLoading || !data) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-24 w-full\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n        </div>\n      </div>\n    );\n  }\n\n  const currentWeek = data.weeks.find(w => w.weekNumber === user?.currentWeek);\n  const progress = ((user?.currentWeek || 1) / 8) * 100;\n  const daysInProgram = Math.ceil(\n    (new Date().getTime() - new Date(user?.createdAt || Date.now()).getTime()) / (1000 * 60 * 60 * 24)\n  );\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      {/* Welcome Header */}\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-dashboard-welcome\">\n          Welcome back, {user?.fullName.split(\" \")[0]}! 🌟\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Day {daysInProgram} of your Arcane Arc journey\n        </p>\n      </div>\n\n      {/* Overall Progress */}\n      <Card className=\"shadow-md\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold\">Your Transformation Progress</h3>\n                <p className=\"text-sm text-muted-foreground\">Week {user?.currentWeek} of 8</p>\n              </div>\n              <div className=\"text-3xl font-bold text-primary\">{Math.round(progress)}%</div>\n            </div>\n            <Progress value={progress} className=\"h-3\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"hover-elevate transition-all shadow-md\" data-testid=\"card-streak\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 rounded-xl bg-primary/10\">\n                <Flame className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Current Streak</p>\n                <p className=\"text-3xl font-bold\">{user?.streak || 0} days</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate transition-all shadow-md\" data-testid=\"card-journals\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 rounded-xl bg-chart-2/10\">\n                <BookOpen className=\"h-8 w-8 text-chart-2\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Journal Entries</p>\n                <p className=\"text-3xl font-bold\">{user?.totalJournals || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate transition-all shadow-md\" data-testid=\"card-challenges\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 rounded-xl bg-chart-3/10\">\n                <Target className=\"h-8 w-8 text-chart-3\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Challenges</p>\n                <p className=\"text-3xl font-bold\">{data.activeChallenges.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {/* Current Week */}\n        {currentWeek && (\n          <Card className=\"shadow-md\" data-testid=\"card-current-week\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-primary\" />\n                This Week's Focus\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <div className=\"text-sm text-muted-foreground mb-1\">Week {currentWeek.weekNumber}</div>\n                <h3 className=\"text-2xl font-serif font-bold\">{currentWeek.title}</h3>\n                <p className=\"text-muted-foreground mt-2\">{currentWeek.description}</p>\n              </div>\n              <Link href=\"/dashboard/challenges\">\n                <a>\n                  <Button className=\"w-full hover-elevate active-elevate-2\" data-testid=\"button-view-challenges\">\n                    View Challenges\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </a>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Today's Reflection */}\n        <Card className=\"shadow-md\" data-testid=\"card-journal-prompt\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5 text-chart-2\" />\n              Today's Reflection\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {data.todayJournal ? (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-sm text-primary\">\n                  <CheckCircle2 className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Completed for today</span>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Great work! You've journaled today. Keep your streak going tomorrow.\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <p className=\"text-muted-foreground\">\n                  Take a moment to reflect on your day. What did you achieve? What challenged you? What are you grateful for?\n                </p>\n              </div>\n            )}\n            <Link href=\"/dashboard/journal\">\n              <a>\n                <Button\n                  variant={data.todayJournal ? \"outline\" : \"default\"}\n                  className=\"w-full hover-elevate active-elevate-2\"\n                  data-testid=\"button-journal\"\n                >\n                  {data.todayJournal ? \"View Journal\" : \"Write Reflection\"}\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </a>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Quick Stats */}\n        <Card className=\"shadow-md lg:col-span-2 xl:col-span-1\" data-testid=\"card-achievements\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5 text-chart-4\" />\n              Achievements\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Weeks Completed</span>\n                <span className=\"font-semibold\">{Math.max(0, (user?.currentWeek || 1) - 1)} / 8</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Challenges Done</span>\n                <span className=\"font-semibold\">\n                  {data.activeChallenges.filter(uc => uc.completed).length}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Longest Streak</span>\n                <span className=\"font-semibold\">{user?.streak || 0} days</span>\n              </div>\n              <Link href=\"/dashboard/profile\">\n                <a>\n                  <Button variant=\"outline\" className=\"w-full mt-2 hover-elevate active-elevate-2\" data-testid=\"button-view-profile\">\n                    View Full Profile\n                  </Button>\n                </a>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Announcements */}\n      {data.announcements.length > 0 && (\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-chart-5\" />\n              Latest Updates\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {data.announcements.slice(0, 3).map((announcement) => (\n                <div key={announcement.id} className=\"border-l-4 border-primary pl-4 py-2\">\n                  <h4 className=\"font-semibold mb-1\">{announcement.title}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{announcement.content}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {new Date(announcement.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":10173},"client/src/pages/AdminUsers.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport { Users, Search, Calendar, Trophy } from \"lucide-react\";\nimport { User } from \"@shared/schema\";\n\nexport default function AdminUsers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-12 w-full\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  const filteredUsers = users?.filter(user =>\n    user.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-users-title\">\n          User Management\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          View and manage all program members\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search users by name, username, or email...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10 h-12\"\n          data-testid=\"input-search-users\"\n        />\n      </div>\n\n      {/* User List */}\n      <div className=\"space-y-4\">\n        {filteredUsers.map((user) => (\n          <Card key={user.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-user-${user.id}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row md:items-center gap-4\">\n                <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-semibold text-primary\">\n                    {user.fullName.split(\" \").map(n => n[0]).join(\"\").toUpperCase().slice(0, 2)}\n                  </span>\n                </div>\n\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold mb-1\">{user.fullName}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    @{user.username} • {user.email}\n                  </p>\n\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"outline\" className=\"px-2 py-1\">\n                      <Users className=\"h-3 w-3 mr-1\" />\n                      {user.role}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"px-2 py-1\">\n                      <Calendar className=\"h-3 w-3 mr-1\" />\n                      Week {user.currentWeek}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"px-2 py-1\">\n                      <Trophy className=\"h-3 w-3 mr-1\" />\n                      {user.streak} day streak\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"px-2 py-1\">\n                      {user.totalJournals} journals\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"text-right text-sm text-muted-foreground\">\n                  Joined {new Date(user.createdAt).toLocaleDateString()}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredUsers.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No users found</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4203},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/Profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getAuthState } from \"@/lib/auth\";\nimport { User, Trophy, Flame, BookOpen, Target, Calendar, Award } from \"lucide-react\";\nimport type { User as UserType, UserAchievement, Achievement } from \"@shared/schema\";\n\ninterface ProfileData {\n  user: UserType;\n  achievements: (UserAchievement & { achievement: Achievement })[];\n  stats: {\n    completedWeeks: number;\n    completedChallenges: number;\n    longestStreak: number;\n  };\n}\n\nexport default function Profile() {\n  const { user } = getAuthState();\n\n  const { data, isLoading } = useQuery<ProfileData>({\n    queryKey: [\"/api/profile\"],\n  });\n\n  if (isLoading || !data) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-32 w-full\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n          <Skeleton className=\"h-48\" />\n        </div>\n      </div>\n    );\n  }\n\n  const progress = ((user?.currentWeek || 1) / 8) * 100;\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-profile-title\">\n          Profile & Progress\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Track your journey and celebrate your achievements\n        </p>\n      </div>\n\n      {/* Profile Card */}\n      <Card className=\"shadow-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex flex-col md:flex-row items-center md:items-start gap-6\">\n            <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-3xl font-bold text-primary\">\n                {user?.fullName.split(\" \").map(n => n[0]).join(\"\").toUpperCase().slice(0, 2)}\n              </span>\n            </div>\n\n            <div className=\"flex-1 text-center md:text-left\">\n              <h2 className=\"text-2xl font-bold mb-1\">{user?.fullName}</h2>\n              <p className=\"text-muted-foreground mb-4\">@{user?.username}</p>\n\n              <div className=\"flex flex-wrap gap-3 justify-center md:justify-start\">\n                <Badge variant=\"outline\" className=\"px-3 py-1\">\n                  <User className=\"h-3 w-3 mr-1\" />\n                  {user?.role === \"admin\" ? \"Admin\" : \"Member\"}\n                </Badge>\n                <Badge variant=\"outline\" className=\"px-3 py-1\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  Joined {new Date(user?.createdAt || \"\").toLocaleDateString()}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Progress Overview */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5 text-primary\" />\n            Overall Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">Week {user?.currentWeek} of 8</span>\n              <span className=\"text-sm font-bold text-primary\">{Math.round(progress)}%</span>\n            </div>\n            <Progress value={progress} className=\"h-3\" />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"p-3 rounded-xl bg-chart-1/10 w-fit mx-auto mb-2\">\n                <Target className=\"h-8 w-8 text-chart-1\" />\n              </div>\n              <p className=\"text-2xl font-bold\">{data.stats.completedWeeks}</p>\n              <p className=\"text-sm text-muted-foreground\">Weeks Completed</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"p-3 rounded-xl bg-chart-2/10 w-fit mx-auto mb-2\">\n                <Flame className=\"h-8 w-8 text-chart-2\" />\n              </div>\n              <p className=\"text-2xl font-bold\">{user?.streak || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Current Streak</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"p-3 rounded-xl bg-chart-3/10 w-fit mx-auto mb-2\">\n                <BookOpen className=\"h-8 w-8 text-chart-3\" />\n              </div>\n              <p className=\"text-2xl font-bold\">{user?.totalJournals || 0}</p>\n              <p className=\"text-sm text-muted-foreground\">Journal Entries</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Achievements */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Award className=\"h-5 w-5 text-chart-4\" />\n            Achievements\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {data.achievements.length > 0 ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {data.achievements.map((userAchievement) => (\n                <div\n                  key={userAchievement.id}\n                  className=\"text-center p-4 rounded-xl bg-primary/5 border border-primary/20\"\n                  data-testid={`badge-${userAchievement.achievement.id}`}\n                >\n                  <div className=\"text-4xl mb-2\">🏆</div>\n                  <p className=\"font-semibold text-sm mb-1\">{userAchievement.achievement.name}</p>\n                  <p className=\"text-xs text-muted-foreground mb-2\">\n                    {userAchievement.achievement.description}\n                  </p>\n                  <p className=\"text-xs text-primary\">\n                    {new Date(userAchievement.unlockedAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">\n                No achievements yet. Keep going to unlock your first badge!\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6518},"design_guidelines.md":{"content":"# Arcane Arc Program - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Wellness + Productivity Hybrid\n\nDrawing inspiration from:\n- **Notion** for clean dashboards and content organization\n- **Linear** for progress visualization and modern UI patterns\n- **Headspace/Calm** for motivational wellness aesthetics\n- **Duolingo** for gamification and streak tracking\n\n**Design Principles:**\n1. Inspirational yet functional - balance motivation with utility\n2. Progressive disclosure - reveal complexity gradually\n3. Celebrate progress - make achievements feel rewarding\n4. Serene focus - minimize distractions during reflection\n\n---\n\n## Typography System\n\n**Font Families:**\n- Primary: Inter (via Google Fonts) - for UI, body text, and data\n- Accent: Playfair Display - for hero headlines, section titles, and inspirational quotes\n\n**Type Scale:**\n- Hero Display: text-6xl md:text-7xl lg:text-8xl (Playfair, font-bold)\n- Section Headers: text-4xl md:text-5xl (Playfair, font-semibold)\n- Page Titles: text-3xl md:text-4xl (Inter, font-bold)\n- Card Titles: text-xl md:text-2xl (Inter, font-semibold)\n- Body Text: text-base md:text-lg (Inter, font-normal)\n- Small Text/Labels: text-sm (Inter, font-medium)\n- Micro Text: text-xs (Inter, font-normal)\n\n**Hierarchy Implementation:**\n- Use Playfair sparingly for emotional impact (heroes, testimonials, week themes)\n- Inter for all functional UI elements\n- Letter spacing: tracking-tight for large headlines, tracking-normal for body\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 8, 12, 16, 20, 24, 32\n\n**Container Strategy:**\n- Public Pages: max-w-7xl for full sections, max-w-4xl for text content\n- Dashboard: max-w-screen-2xl with sidebar layout\n- Admin Panel: Full-width with left sidebar navigation\n\n**Grid Patterns:**\n- Landing Features: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\n- Dashboard Cards: grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\n- Progress Modules: grid-cols-1 md:grid-cols-2 gap-8\n\n**Section Padding:**\n- Desktop: py-20 md:py-24 lg:py-32\n- Mobile: py-12 md:py-16\n- Card Internal: p-6 md:p-8\n\n---\n\n## Component Library\n\n### Navigation\n\n**Public Header:**\n- Sticky top navigation (sticky top-0 z-50)\n- Logo left, navigation center, CTA button right\n- Transparent background with backdrop blur on scroll\n- Mobile: Hamburger menu with slide-in drawer\n\n**Dashboard Sidebar:**\n- Fixed left sidebar (w-64) on desktop\n- Collapsible on tablet/mobile with overlay\n- Icon + label navigation items\n- User profile card at bottom\n- Active state with subtle left border accent\n\n### Hero Section\n\n**Landing Hero:**\n- Full viewport height (min-h-screen)\n- Background: Large atmospheric winter/mountain image with gradient overlay\n- Content: Centered with max-w-4xl\n- Headline + subheadline + dual CTAs (primary + secondary)\n- Scroll indicator at bottom\n- Image: Inspiring winter landscape, mountain peaks at dawn, or person silhouetted against aurora\n\n### Cards & Containers\n\n**Feature Cards (Landing):**\n- Rounded corners (rounded-2xl)\n- Subtle border with hover lift effect\n- Icon at top (w-12 h-12)\n- Title + description + optional link\n- Padding: p-8\n\n**Dashboard Progress Cards:**\n- Rounded (rounded-xl)\n- Shadow (shadow-md)\n- Header with icon + title\n- Content area with generous padding (p-6)\n- Footer with action buttons if needed\n\n**Challenge Cards:**\n- Full-bleed for active challenge\n- Compact list view for upcoming\n- Checkbox left, content center, status badge right\n- Expandable for details\n\n### Progress Visualization\n\n**Progress Bars:**\n- Height: h-3 for main progress, h-2 for mini\n- Rounded full (rounded-full)\n- Animated fill with transition-all duration-500\n- Percentage label outside or overlaid\n\n**Circular Progress (Week Modules):**\n- SVG-based circular indicators\n- Diameter: 120px for primary, 80px for compact\n- Stroke width: 8px\n- Animated arc with percentage in center\n\n**Streak Counter:**\n- Flame icon + number combo\n- Badge style (rounded-full px-4 py-2)\n- Pulsing animation for active streak\n\n### Forms & Inputs\n\n**Text Inputs:**\n- Height: h-12\n- Rounded: rounded-lg\n- Border: border-2\n- Focus: ring-4 with offset\n- Padding: px-4\n\n**Textarea (Journal):**\n- Min height: min-h-48\n- Rounded: rounded-lg\n- Resize vertical only\n- Auto-save indicator (small text below)\n\n**Buttons:**\n- Primary: Large (h-12 px-8), rounded-lg, font-semibold\n- Secondary: Same size, outline variant\n- Icon buttons: w-10 h-10, rounded-md\n- On hero images: Backdrop blur background (backdrop-blur-sm)\n\n### Badges & Tags\n\n**Achievement Badges:**\n- Circular with icon (w-16 h-16)\n- Glow effect for unlocked\n- Grayscale for locked\n- Tooltip on hover\n\n**Status Tags:**\n- Small (text-xs px-3 py-1)\n- Rounded-full\n- Various semantic states (active, completed, pending)\n\n### Data Display\n\n**Weekly Theme Cards:**\n- Large icon at top (w-20 h-20)\n- Week number + theme name\n- Progress ring around card\n- \"Start Week\" / \"Continue\" button at bottom\n- Grid layout: 4 cards per row on desktop\n\n**Journal Entries List:**\n- Timeline-style with left border\n- Date header + entry preview\n- Expandable to full text\n- Max 5 visible, \"Load more\" button\n\n**Analytics Charts (Admin):**\n- Clean line/bar charts\n- Minimal gridlines\n- Tooltips on hover\n- Legend at bottom\n\n### Community Elements\n\n**Member Avatars:**\n- Circular (rounded-full)\n- Sizes: w-8 h-8 (mini), w-12 h-12 (standard), w-24 h-24 (profile)\n- Initials fallback for no image\n\n**Reflection Share Cards:**\n- User avatar + name header\n- Reflection text (line-clamp-3)\n- Like/comment counts\n- Timestamp\n\n---\n\n## Page-Specific Layouts\n\n### Landing Page Structure\n\n1. **Hero** (full viewport): Image background + centered CTA\n2. **Program Overview** (py-24): 8-week grid with icons\n3. **How It Works** (py-20): 3-step process, alternating image-text\n4. **Testimonials** (py-24): 3-column grid with quotes + avatars\n5. **Meet the Mentor** (py-20): 2-column split (image left, bio right)\n6. **Final CTA** (py-32): Centered with gradient background\n7. **Footer**: 4-column grid (About, Program, Resources, Social)\n\n### User Dashboard Layout\n\n**Left Sidebar** (fixed, w-64):\n- Logo + navigation + profile\n\n**Main Content Area** (flex-1):\n- Welcome header with greeting + progress\n- \"Today's Focus\" card (prominent)\n- 3-column grid: This Week's Challenge | Journal Prompt | Quick Stats\n- Recent Activity timeline\n- Upcoming milestones\n\n### Admin Panel Layout\n\n**Left Sidebar** (w-64): Admin navigation\n\n**Top Bar**: Search + notifications + admin profile\n\n**Main Area**:\n- Stats overview (4 cards in row)\n- Recent activity table\n- Quick actions section\n\n---\n\n## Animations\n\n**Sparingly Applied:**\n- Progress bar fills (transition-all duration-500)\n- Card hover lift (translate-y-1 transition-transform)\n- Badge unlock (scale-in with glow)\n- Page transitions (fade)\n\n---\n\n## Images\n\n**Hero Image:** Large, high-quality winter landscape - mountain range at sunrise with subtle aurora hints, atmospheric mist. Position: background-cover with gradient overlay (dark to transparent).\n\n**About Section Image:** Portrait of mentor in thoughtful pose, warm lighting. Position: Left side of 2-column layout.\n\n**How It Works:** Simple illustrative icons or abstract imagery for each step - no photography needed, focus on clarity.\n\n**Testimonials:** User avatars (circular, professional headshots if available, initials fallback).\n\n**Admin Panel:** No decorative images - focus on data visualization and charts.","size_bytes":7453},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":532},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport About from \"@/pages/About\";\nimport Program from \"@/pages/Program\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Journal from \"@/pages/Journal\";\nimport Challenges from \"@/pages/Challenges\";\nimport Learning from \"@/pages/Learning\";\nimport Profile from \"@/pages/Profile\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport AdminUsers from \"@/pages/AdminUsers\";\nimport AdminChallenges from \"@/pages/AdminChallenges\";\nimport AdminAnnouncements from \"@/pages/AdminAnnouncements\";\nimport AdminResources from \"@/pages/AdminResources\";\n\nfunction PublicRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/program\" component={Program} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction DashboardRouter() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b border-border bg-background\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-y-auto bg-background\">\n            <Switch>\n              <Route path=\"/dashboard\">\n                {() => (\n                  <ProtectedRoute>\n                    <Dashboard />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/dashboard/journal\">\n                {() => (\n                  <ProtectedRoute>\n                    <Journal />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/dashboard/challenges\">\n                {() => (\n                  <ProtectedRoute>\n                    <Challenges />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/dashboard/learning\">\n                {() => (\n                  <ProtectedRoute>\n                    <Learning />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/dashboard/profile\">\n                {() => (\n                  <ProtectedRoute>\n                    <Profile />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/admin\">\n                {() => (\n                  <ProtectedRoute requireAdmin>\n                    <AdminDashboard />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/admin/users\">\n                {() => (\n                  <ProtectedRoute requireAdmin>\n                    <AdminUsers />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/admin/challenges\">\n                {() => (\n                  <ProtectedRoute requireAdmin>\n                    <AdminChallenges />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/admin/announcements\">\n                {() => (\n                  <ProtectedRoute requireAdmin>\n                    <AdminAnnouncements />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route path=\"/admin/resources\">\n                {() => (\n                  <ProtectedRoute requireAdmin>\n                    <AdminResources />\n                  </ProtectedRoute>\n                )}\n              </Route>\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Switch>\n          <Route path=\"/dashboard\" nest>\n            {() => <DashboardRouter />}\n          </Route>\n          <Route path=\"/admin\" nest>\n            {() => <DashboardRouter />}\n          </Route>\n          <Route>\n            {() => <PublicRouter />}\n          </Route>\n        </Switch>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":5098},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/PublicHeader.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Menu, X, Snowflake } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport function PublicHeader() {\n  const [location] = useLocation();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/program\", label: \"Program\" },\n  ];\n\n  return (\n    <header\n      className={`sticky top-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? \"bg-background/95 backdrop-blur-md border-b border-border shadow-sm\"\n          : \"bg-transparent\"\n      }`}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center gap-2 hover-elevate rounded-lg px-2 py-1 -ml-2\" data-testid=\"link-home\">\n            <Snowflake className=\"h-8 w-8 text-primary\" />\n            <span className=\"font-serif text-xl font-bold\">Arcane Arc</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center gap-1\">\n            {navLinks.map((link) => (\n              <Link \n                key={link.href} \n                href={link.href}\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors hover-elevate ${\n                  location === link.href\n                    ? \"text-foreground\"\n                    : \"text-muted-foreground\"\n                }`}\n                data-testid={`link-${link.label.toLowerCase()}`}\n              >\n                {link.label}\n              </Link>\n            ))}\n          </nav>\n\n          {/* Desktop Actions */}\n          <div className=\"hidden md:flex items-center gap-2\">\n            <ThemeToggle />\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" data-testid=\"button-login\" className=\"hover-elevate active-elevate-2\" asChild>\n                <span>Login</span>\n              </Button>\n            </Link>\n            <Link href=\"/signup\">\n              <Button data-testid=\"button-signup-header\" className=\"hover-elevate active-elevate-2\" asChild>\n                <span>Join Program</span>\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"flex md:hidden items-center gap-2\">\n            <ThemeToggle />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n              className=\"hover-elevate active-elevate-2\"\n            >\n              {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden border-t border-border bg-background/95 backdrop-blur-md\">\n          <div className=\"px-4 py-4 space-y-2\">\n            {navLinks.map((link) => (\n              <Link \n                key={link.href} \n                href={link.href}\n                className={`block px-4 py-2 rounded-lg text-sm font-medium transition-colors hover-elevate ${\n                  location === link.href\n                    ? \"bg-accent text-accent-foreground\"\n                    : \"text-muted-foreground\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n                data-testid={`link-mobile-${link.label.toLowerCase()}`}\n              >\n                {link.label}\n              </Link>\n            ))}\n            <div className=\"pt-2 border-t border-border space-y-2\">\n              <Link href=\"/login\" onClick={() => setMobileMenuOpen(false)} className=\"block\">\n                <Button variant=\"ghost\" className=\"w-full hover-elevate active-elevate-2\" data-testid=\"button-mobile-login\">\n                  Login\n                </Button>\n              </Link>\n              <Link href=\"/signup\" onClick={() => setMobileMenuOpen(false)} className=\"block\">\n                <Button className=\"w-full hover-elevate active-elevate-2\" data-testid=\"button-mobile-signup\">\n                  Join Program\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":4785},"client/src/pages/Program.tsx":{"content":"import { PublicHeader } from \"@/components/PublicHeader\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport {\n  Target,\n  BookOpen,\n  Dumbbell,\n  Brain,\n  Briefcase,\n  Heart,\n  CheckCircle2,\n  Calendar,\n  TrendingUp,\n  Award,\n  Sparkles,\n  Trophy,\n} from \"lucide-react\";\n\nconst weeklyProgram = [\n  {\n    week: 1,\n    title: \"Self Reflection\",\n    icon: Target,\n    color: \"text-chart-1\",\n    bgColor: \"bg-chart-1/10\",\n    description: \"Begin your journey with deep self-discovery and understanding your current state.\",\n    activities: [\n      \"Complete a comprehensive self-assessment\",\n      \"Define your core values and priorities\",\n      \"Set meaningful 8-week transformation goals\",\n      \"Establish your daily reflection routine\",\n    ],\n  },\n  {\n    week: 2,\n    title: \"Skill Growth\",\n    icon: BookOpen,\n    color: \"text-chart-2\",\n    bgColor: \"bg-chart-2/10\",\n    description: \"Identify skills you want to develop and create a learning roadmap.\",\n    activities: [\n      \"Choose 1-2 skills to focus on this winter\",\n      \"Access curated learning resources\",\n      \"Complete daily skill-building exercises\",\n      \"Track your learning progress\",\n    ],\n  },\n  {\n    week: 3,\n    title: \"Physical Health\",\n    icon: Dumbbell,\n    color: \"text-chart-3\",\n    bgColor: \"bg-chart-3/10\",\n    description: \"Build sustainable fitness habits and optimize your physical well-being.\",\n    activities: [\n      \"Establish a consistent exercise routine\",\n      \"Plan nutritious meals for the week\",\n      \"Track sleep quality and energy levels\",\n      \"Complete physical wellness challenges\",\n    ],\n  },\n  {\n    week: 4,\n    title: \"Mind & Spirit\",\n    icon: Brain,\n    color: \"text-chart-4\",\n    bgColor: \"bg-chart-4/10\",\n    description: \"Cultivate mental clarity through mindfulness and spiritual practices.\",\n    activities: [\n      \"Practice daily meditation or mindfulness\",\n      \"Explore spiritual or philosophical readings\",\n      \"Journal about deeper questions and purpose\",\n      \"Reduce digital distractions mindfully\",\n    ],\n  },\n  {\n    week: 5,\n    title: \"Knowledge Expansion\",\n    icon: Sparkles,\n    color: \"text-chart-5\",\n    bgColor: \"bg-chart-5/10\",\n    description: \"Broaden your horizons with new ideas, books, and perspectives.\",\n    activities: [\n      \"Read transformative books or articles\",\n      \"Engage with educational content daily\",\n      \"Take notes on key insights\",\n      \"Apply new knowledge to your life\",\n    ],\n  },\n  {\n    week: 6,\n    title: \"Career Growth\",\n    icon: Briefcase,\n    color: \"text-chart-1\",\n    bgColor: \"bg-chart-1/10\",\n    description: \"Advance your professional goals and clarify your career vision.\",\n    activities: [\n      \"Define career objectives for the year\",\n      \"Update your skills and portfolio\",\n      \"Network with professionals in your field\",\n      \"Complete career-building challenges\",\n    ],\n  },\n  {\n    week: 7,\n    title: \"Relationships\",\n    icon: Heart,\n    color: \"text-chart-2\",\n    bgColor: \"bg-chart-2/10\",\n    description: \"Strengthen connections and build meaningful relationships.\",\n    activities: [\n      \"Reach out to important people in your life\",\n      \"Practice active listening and empathy\",\n      \"Set boundaries where needed\",\n      \"Express gratitude to others\",\n    ],\n  },\n  {\n    week: 8,\n    title: \"Integration & Celebration\",\n    icon: Trophy,\n    color: \"text-primary\",\n    bgColor: \"bg-primary/10\",\n    description: \"Integrate all learnings and celebrate your transformation.\",\n    activities: [\n      \"Review your 8-week journey\",\n      \"Celebrate achievements and progress\",\n      \"Create a sustainable maintenance plan\",\n      \"Set goals for continued growth\",\n    ],\n  },\n];\n\nconst programFeatures = [\n  {\n    icon: Calendar,\n    title: \"Daily Check-ins\",\n    description: \"Structured prompts to reflect on achievements, challenges, and gratitude\",\n  },\n  {\n    icon: TrendingUp,\n    title: \"Progress Tracking\",\n    description: \"Visual dashboards showing your growth across all dimensions\",\n  },\n  {\n    icon: Award,\n    title: \"Achievement System\",\n    description: \"Unlock badges and rewards as you complete milestones\",\n  },\n  {\n    icon: CheckCircle2,\n    title: \"Weekly Challenges\",\n    description: \"Curated activities designed to push you outside your comfort zone\",\n  },\n];\n\nexport default function Program() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PublicHeader />\n\n      {/* Hero */}\n      <section className=\"py-20 md:py-32 bg-gradient-to-b from-muted/50 to-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"font-serif text-5xl md:text-6xl lg:text-7xl font-bold mb-6 tracking-tight\" data-testid=\"text-program-hero\">\n            The 8-Week Journey\n          </h1>\n          <p className=\"text-xl text-muted-foreground leading-relaxed max-w-2xl mx-auto\">\n            A comprehensive, week-by-week transformation program designed to help you grow\n            holistically across all areas of life.\n          </p>\n        </div>\n      </section>\n\n      {/* Weekly Breakdown */}\n      <section className=\"py-20 md:py-24 bg-background\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\">\n              Week-by-Week Structure\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Each week builds upon the last, creating a comprehensive transformation\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {weeklyProgram.map((week) => {\n              const Icon = week.icon;\n              return (\n                <Card key={week.week} className=\"hover-elevate transition-all\" data-testid={`card-week-detail-${week.week}`}>\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex flex-col lg:flex-row gap-6\">\n                      <div className=\"flex-shrink-0\">\n                        <div className={`p-6 rounded-2xl ${week.bgColor} w-fit`}>\n                          <Icon className={`h-12 w-12 ${week.color}`} />\n                        </div>\n                      </div>\n\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-baseline gap-3 mb-3\">\n                          <span className=\"text-sm font-semibold text-muted-foreground\">\n                            WEEK {week.week}\n                          </span>\n                          <h3 className=\"text-2xl font-serif font-bold\">{week.title}</h3>\n                        </div>\n\n                        <p className=\"text-lg text-muted-foreground mb-4\">\n                          {week.description}\n                        </p>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          {week.activities.map((activity, idx) => (\n                            <div key={idx} className=\"flex items-start gap-2\">\n                              <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                              <span className=\"text-muted-foreground\">{activity}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Program Features */}\n      <section className=\"py-20 md:py-24 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\">\n              What's Included\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to succeed in your transformation journey\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {programFeatures.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-program-feature-${index}`}>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"p-3 rounded-xl bg-primary/10 w-fit mx-auto mb-4\">\n                      <Icon className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA */}\n      <section className=\"py-20 md:py-32 bg-gradient-to-br from-primary/10 to-secondary/10\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold mb-6\">\n            Start Your 8-Week Transformation\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of members who have completed the Winter Arc and emerged transformed.\n          </p>\n          <Link href=\"/signup\">\n            <a>\n              <Button size=\"lg\" className=\"text-lg px-8 h-14 hover-elevate active-elevate-2\" data-testid=\"button-program-join\">\n                Join the Arcane Arc\n              </Button>\n            </a>\n          </Link>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9897},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/app-sidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport {\n  LayoutDashboard,\n  BookOpen,\n  Target,\n  Library,\n  User,\n  Trophy,\n  LogOut,\n  Snowflake,\n  BarChart3,\n  Users,\n  MessageSquare,\n  Settings,\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getAuthState, clearAuthState, isAdmin } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation();\n  const { user } = getAuthState();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    clearAuthState();\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out.\",\n    });\n    setLocation(\"/\");\n  };\n\n  const userMenuItems = [\n    { title: \"Dashboard\", url: \"/dashboard\", icon: LayoutDashboard },\n    { title: \"Journal\", url: \"/dashboard/journal\", icon: BookOpen },\n    { title: \"Challenges\", url: \"/dashboard/challenges\", icon: Target },\n    { title: \"Learning Hub\", url: \"/dashboard/learning\", icon: Library },\n    { title: \"Profile\", url: \"/dashboard/profile\", icon: User },\n  ];\n\n  const adminMenuItems = [\n    { title: \"Admin Dashboard\", url: \"/admin\", icon: BarChart3 },\n    { title: \"Users\", url: \"/admin/users\", icon: Users },\n    { title: \"Challenges\", url: \"/admin/challenges\", icon: Target },\n    { title: \"Announcements\", url: \"/admin/announcements\", icon: MessageSquare },\n    { title: \"Resources\", url: \"/admin/resources\", icon: Library },\n    { title: \"Settings\", url: \"/admin/settings\", icon: Settings },\n  ];\n\n  const menuItems = isAdmin(user) ? adminMenuItems : userMenuItems;\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border p-4\">\n        <Link href={isAdmin(user) ? \"/admin\" : \"/dashboard\"}>\n          <a className=\"flex items-center gap-2 hover-elevate rounded-lg px-2 py-1 -ml-2\">\n            <Snowflake className=\"h-6 w-6 text-primary\" />\n            <span className=\"font-serif text-lg font-bold\">Arcane Arc</span>\n          </a>\n        </Link>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>{isAdmin(user) ? \"Admin\" : \"Navigation\"}</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.url || location.startsWith(item.url + \"/\");\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={isActive}>\n                      <Link href={item.url}>\n                        <a data-testid={`link-sidebar-${item.title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n                          <Icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </a>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border p-4\">\n        <div className=\"space-y-3\">\n          {user && (\n            <div className=\"flex items-center gap-3 px-2 py-1\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center\">\n                <span className=\"text-xs font-semibold text-primary\">\n                  {user.fullName.split(\" \").map(n => n[0]).join(\"\").toUpperCase().slice(0, 2)}\n                </span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm font-medium truncate\">{user.fullName}</div>\n                <div className=\"text-xs text-sidebar-foreground/70 truncate\">@{user.username}</div>\n              </div>\n            </div>\n          )}\n          <button\n            onClick={handleLogout}\n            className=\"w-full flex items-center gap-2 px-2 py-2 rounded-lg text-sm font-medium text-sidebar-foreground hover-elevate active-elevate-2\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span>Logout</span>\n          </button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4478},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/pages/AdminResources.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Library, Plus, ExternalLink } from \"lucide-react\";\nimport { Resource } from \"@shared/schema\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function AdminResources() {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"Self-Discipline\",\n    type: \"article\",\n    url: \"\",\n  });\n\n  const { data: resources, isLoading } = useQuery<Resource[]>({\n    queryKey: [\"/api/admin/resources\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/resources\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/resources\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/resources\"] });\n      toast({\n        title: \"Resource added!\",\n        description: \"The new resource is now available in the learning hub.\",\n      });\n      setFormData({\n        title: \"\",\n        description: \"\",\n        category: \"Self-Discipline\",\n        type: \"article\",\n        url: \"\",\n      });\n      setShowForm(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create resource\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-resources-title\">\n            Resource Library\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Manage learning resources for program members\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowForm(!showForm)}\n          className=\"hover-elevate active-elevate-2\"\n          data-testid=\"button-create-resource\"\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Resource\n        </Button>\n      </div>\n\n      {/* Create Form */}\n      {showForm && (\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>New Resource</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                createMutation.mutate();\n              }}\n              className=\"space-y-4\"\n            >\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Resource title\"\n                  required\n                  className=\"h-12\"\n                  data-testid=\"input-resource-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Describe the resource...\"\n                  required\n                  className=\"min-h-24\"\n                  data-testid=\"input-resource-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                    <SelectTrigger id=\"category\" className=\"h-12\" data-testid=\"select-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Self-Discipline\">Self-Discipline</SelectItem>\n                      <SelectItem value=\"Health\">Health</SelectItem>\n                      <SelectItem value=\"Business\">Business</SelectItem>\n                      <SelectItem value=\"Mindfulness\">Mindfulness</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value })}>\n                    <SelectTrigger id=\"type\" className=\"h-12\" data-testid=\"select-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"video\">Video</SelectItem>\n                      <SelectItem value=\"pdf\">PDF</SelectItem>\n                      <SelectItem value=\"article\">Article</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"url\">URL</Label>\n                <Input\n                  id=\"url\"\n                  type=\"url\"\n                  value={formData.url}\n                  onChange={(e) => setFormData({ ...formData, url: e.target.value })}\n                  placeholder=\"https://...\"\n                  required\n                  className=\"h-12\"\n                  data-testid=\"input-resource-url\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 hover-elevate active-elevate-2\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-resource\"\n                >\n                  {createMutation.isPending ? \"Adding...\" : \"Add Resource\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowForm(false)}\n                  className=\"hover-elevate active-elevate-2\"\n                  data-testid=\"button-cancel-resource\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Resources List */}\n      <div className=\"space-y-4\">\n        {resources && resources.length > 0 ? (\n          resources.map((resource) => (\n            <Card key={resource.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-resource-${resource.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-primary/10 text-primary font-medium\">\n                        {resource.category}\n                      </span>\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-muted capitalize\">\n                        {resource.type}\n                      </span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\">{resource.title}</h3>\n                    <p className=\"text-muted-foreground mb-3\">{resource.description}</p>\n                    <a\n                      href={resource.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center gap-2 text-sm text-primary hover:underline\"\n                    >\n                      {resource.url}\n                      <ExternalLink className=\"h-3 w-3\" />\n                    </a>\n                  </div>\n                  <Library className=\"h-6 w-6 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Library className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No resources yet</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9153},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/Journal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { BookOpen, Save, Calendar, Smile, Meh, Frown, Sparkles } from \"lucide-react\";\nimport { Journal as JournalType } from \"@shared/schema\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst moodOptions = [\n  { value: \"great\", label: \"Great\", icon: Sparkles, color: \"text-chart-1\" },\n  { value: \"good\", label: \"Good\", icon: Smile, color: \"text-chart-2\" },\n  { value: \"okay\", label: \"Okay\", icon: Meh, color: \"text-chart-3\" },\n  { value: \"challenging\", label: \"Challenging\", icon: Frown, color: \"text-chart-4\" },\n];\n\nexport default function Journal() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    achievement: \"\",\n    challenge: \"\",\n    gratitude: \"\",\n    mood: \"good\",\n  });\n\n  const { data: journals, isLoading } = useQuery<JournalType[]>({\n    queryKey: [\"/api/journals\"],\n  });\n\n  const { data: todayJournal } = useQuery<JournalType | null>({\n    queryKey: [\"/api/journals/today\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/journals\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/journals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/journals/today\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Journal entry saved! 📝\",\n        description: \"Your reflection has been recorded.\",\n      });\n      setFormData({\n        achievement: \"\",\n        challenge: \"\",\n        gratitude: \"\",\n        mood: \"good\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save journal entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-journal-title\">\n          Daily Journal\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Reflect on your journey and track your growth\n        </p>\n      </div>\n\n      {/* Today's Entry */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5 text-primary\" />\n            Today's Reflection\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {todayJournal ? (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-primary/10 rounded-lg border border-primary/20\">\n                <p className=\"text-sm text-primary font-medium mb-2\">✓ You've already journaled today!</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your entry has been saved. Come back tomorrow to continue your reflection practice.\n                </p>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">What did I achieve today?</Label>\n                  <p className=\"text-muted-foreground\">{todayJournal.achievement || \"—\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">What challenged me?</Label>\n                  <p className=\"text-muted-foreground\">{todayJournal.challenge || \"—\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">What am I grateful for?</Label>\n                  <p className=\"text-muted-foreground\">{todayJournal.gratitude || \"—\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">Mood</Label>\n                  <p className=\"text-muted-foreground capitalize\">{todayJournal.mood || \"—\"}</p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"achievement\">What did I achieve today? ✨</Label>\n                <Textarea\n                  id=\"achievement\"\n                  placeholder=\"Reflect on your accomplishments, big or small...\"\n                  value={formData.achievement}\n                  onChange={(e) => setFormData({ ...formData, achievement: e.target.value })}\n                  className=\"min-h-24 resize-y\"\n                  data-testid=\"input-achievement\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"challenge\">What challenged me? 💪</Label>\n                <Textarea\n                  id=\"challenge\"\n                  placeholder=\"Acknowledge the obstacles you faced and how you responded...\"\n                  value={formData.challenge}\n                  onChange={(e) => setFormData({ ...formData, challenge: e.target.value })}\n                  className=\"min-h-24 resize-y\"\n                  data-testid=\"input-challenge\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gratitude\">What am I grateful for? 🙏</Label>\n                <Textarea\n                  id=\"gratitude\"\n                  placeholder=\"Express gratitude for the people, experiences, or moments...\"\n                  value={formData.gratitude}\n                  onChange={(e) => setFormData({ ...formData, gratitude: e.target.value })}\n                  className=\"min-h-24 resize-y\"\n                  data-testid=\"input-gratitude\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mood\">How was your day? 😊</Label>\n                <Select value={formData.mood} onValueChange={(value) => setFormData({ ...formData, mood: value })}>\n                  <SelectTrigger id=\"mood\" className=\"h-12\" data-testid=\"select-mood\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {moodOptions.map((option) => {\n                      const Icon = option.icon;\n                      return (\n                        <SelectItem key={option.value} value={option.value}>\n                          <div className=\"flex items-center gap-2\">\n                            <Icon className={`h-4 w-4 ${option.color}`} />\n                            <span>{option.label}</span>\n                          </div>\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 hover-elevate active-elevate-2\"\n                disabled={createMutation.isPending}\n                data-testid=\"button-save-journal\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {createMutation.isPending ? \"Saving...\" : \"Save Reflection\"}\n              </Button>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Past Entries */}\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\n          <Calendar className=\"h-6 w-6 text-primary\" />\n          Past Reflections\n        </h2>\n\n        {journals && journals.length > 0 ? (\n          <div className=\"space-y-4\">\n            {journals.slice(0, 10).map((journal) => (\n              <Card key={journal.id} className=\"hover-elevate transition-all\" data-testid={`card-journal-${journal.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">\n                      {new Date(journal.date).toLocaleDateString(\"en-US\", {\n                        weekday: \"long\",\n                        year: \"numeric\",\n                        month: \"long\",\n                        day: \"numeric\",\n                      })}\n                    </p>\n                    {journal.mood && (\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-muted capitalize\">\n                        {journal.mood}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"space-y-3 text-sm\">\n                    {journal.achievement && (\n                      <div>\n                        <p className=\"font-medium mb-1\">Achievement:</p>\n                        <p className=\"text-muted-foreground\">{journal.achievement}</p>\n                      </div>\n                    )}\n                    {journal.challenge && (\n                      <div>\n                        <p className=\"font-medium mb-1\">Challenge:</p>\n                        <p className=\"text-muted-foreground\">{journal.challenge}</p>\n                      </div>\n                    )}\n                    {journal.gratitude && (\n                      <div>\n                        <p className=\"font-medium mb-1\">Gratitude:</p>\n                        <p className=\"text-muted-foreground\">{journal.gratitude}</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No past entries yet. Start journaling today!</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10556},"client/src/lib/auth.ts":{"content":"import { User } from \"@shared/schema\";\n\nexport interface AuthState {\n  user: User | null;\n  token: string | null;\n}\n\nexport function getAuthState(): AuthState {\n  const token = localStorage.getItem(\"token\");\n  const userStr = localStorage.getItem(\"user\");\n  const user = userStr ? JSON.parse(userStr) : null;\n  return { user, token };\n}\n\nexport function setAuthState(user: User, token: string) {\n  localStorage.setItem(\"token\", token);\n  localStorage.setItem(\"user\", JSON.stringify(user));\n}\n\nexport function clearAuthState() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"user\");\n}\n\nexport function isAdmin(user: User | null): boolean {\n  return user?.role === \"admin\";\n}\n","size_bytes":691},"client/src/pages/About.tsx":{"content":"import { PublicHeader } from \"@/components/PublicHeader\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Target, BookOpen, Dumbbell, Brain, Briefcase, Heart, Snowflake, Sparkles } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nconst corePillars = [\n  {\n    icon: Target,\n    title: \"Self\",\n    description: \"Deep introspection and understanding of your authentic self\",\n    color: \"text-chart-1\",\n  },\n  {\n    icon: BookOpen,\n    title: \"Skill\",\n    description: \"Continuous learning and mastery of new abilities\",\n    color: \"text-chart-2\",\n  },\n  {\n    icon: Dumbbell,\n    title: \"Body\",\n    description: \"Physical health, fitness, and vitality\",\n    color: \"text-chart-3\",\n  },\n  {\n    icon: Brain,\n    title: \"Mind\",\n    description: \"Mental clarity, mindfulness, and spiritual growth\",\n    color: \"text-chart-4\",\n  },\n  {\n    icon: Sparkles,\n    title: \"Spirit\",\n    description: \"Connection to purpose and deeper meaning\",\n    color: \"text-chart-5\",\n  },\n  {\n    icon: Briefcase,\n    title: \"Career\",\n    description: \"Professional growth and purposeful work\",\n    color: \"text-chart-1\",\n  },\n  {\n    icon: Heart,\n    title: \"Relationship\",\n    description: \"Meaningful connections and social bonds\",\n    color: \"text-chart-2\",\n  },\n];\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PublicHeader />\n\n      {/* Hero Section */}\n      <section className=\"py-20 md:py-32 bg-gradient-to-b from-muted/50 to-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 mb-8\">\n            <Snowflake className=\"h-4 w-4 text-primary\" />\n            <span className=\"text-sm font-medium text-primary\">Our Philosophy</span>\n          </div>\n\n          <h1 className=\"font-serif text-5xl md:text-6xl lg:text-7xl font-bold mb-6 tracking-tight\" data-testid=\"text-about-title\">\n            More Than a Program\n          </h1>\n          <p className=\"text-xl text-muted-foreground leading-relaxed\">\n            Arcane Arc is not just a program — it's a journey through reflection, discipline, and growth.\n            A transformative experience designed to help you unlock your potential during the transformative winter season.\n          </p>\n        </div>\n      </section>\n\n      {/* Origin Story */}\n      <section className=\"py-20 md:py-24 bg-background\">\n        <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-6\">\n                Origin of the Winter Arc\n              </h2>\n              <div className=\"space-y-4 text-lg text-muted-foreground\">\n                <p>\n                  The concept of the Winter Arc emerged from an ancient understanding that winter\n                  represents a period of introspection, renewal, and transformation. Just as nature\n                  retreats to gather strength for spring, we too can use this season for deep personal growth.\n                </p>\n                <p>\n                  Founded by transformation coach Ashik, the Arcane Arc Program combines modern goal-setting\n                  methodologies with timeless wisdom about seasonal cycles and personal development. It's\n                  designed for those who refuse to hibernate through winter but instead choose to emerge\n                  stronger, wiser, and more aligned with their true selves.\n                </p>\n                <p>\n                  Over the years, thousands have completed the Winter Arc, reporting profound changes in\n                  their mindset, habits, and overall life satisfaction. This isn't about temporary motivation —\n                  it's about sustainable transformation.\n                </p>\n              </div>\n            </div>\n\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <blockquote className=\"border-l-4 border-primary pl-6 py-4\">\n                  <p className=\"font-serif text-2xl mb-4 italic\">\n                    \"Winter is not a season to endure, but a canvas to paint your transformation.\"\n                  </p>\n                  <footer className=\"text-muted-foreground\">— Ashik, Founder</footer>\n                </blockquote>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Core Pillars */}\n      <section className=\"py-20 md:py-24 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\">\n              The Seven Core Pillars\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Holistic transformation across all dimensions of your life\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {corePillars.map((pillar, index) => {\n              const Icon = pillar.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-pillar-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className={`p-3 rounded-xl bg-card mb-4 w-fit ${pillar.color}`}>\n                      <Icon className=\"h-8 w-8\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{pillar.title}</h3>\n                    <p className=\"text-muted-foreground\">{pillar.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Methodology */}\n      <section className=\"py-20 md:py-24 bg-background\">\n        <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-12 text-center\">\n            Our Methodology\n          </h2>\n\n          <div className=\"space-y-8\">\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-semibold mb-4\">1. Structured Reflection</h3>\n                <p className=\"text-lg text-muted-foreground\">\n                  Daily journaling prompts guide you to examine your achievements, challenges, and\n                  gratitude. This consistent practice builds self-awareness and tracks your growth over time.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-semibold mb-4\">2. Progressive Challenges</h3>\n                <p className=\"text-lg text-muted-foreground\">\n                  Each week introduces new challenges aligned with that week's theme. These aren't\n                  overwhelming — they're carefully designed to be achievable yet transformative.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-semibold mb-4\">3. Gamified Progress</h3>\n                <p className=\"text-lg text-muted-foreground\">\n                  Track your streaks, earn badges, and visualize your progress. Gamification makes\n                  the journey engaging while maintaining the depth of real transformation.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-semibold mb-4\">4. Community Support</h3>\n                <p className=\"text-lg text-muted-foreground\">\n                  You're not alone on this journey. Connect with fellow members, share insights,\n                  and draw inspiration from others pursuing the same path of growth.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 md:py-32 bg-gradient-to-br from-primary/10 to-secondary/10\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold mb-6\">\n            Begin Your Transformation\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Join the Winter Arc and discover what you're truly capable of achieving.\n          </p>\n          <Link href=\"/signup\">\n            <a>\n              <Button size=\"lg\" className=\"text-lg px-8 h-14 hover-elevate active-elevate-2\" data-testid=\"button-about-join\">\n                Join the Program\n              </Button>\n            </a>\n          </Link>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9222},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Snowflake, Loader2 } from \"lucide-react\";\nimport { setAuthState } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    fullName: \"\",\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await apiRequest(\"POST\", \"/api/auth/signup\", formData);\n      setAuthState(result.user, result.token);\n      \n      toast({\n        title: \"Welcome to Arcane Arc! ❄️\",\n        description: \"Your transformation journey begins now.\",\n      });\n\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Could not create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <a className=\"inline-flex items-center gap-2 hover-elevate rounded-lg px-3 py-2\">\n              <Snowflake className=\"h-10 w-10 text-primary\" />\n              <span className=\"font-serif text-2xl font-bold\">Arcane Arc</span>\n            </a>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Begin Your Journey</CardTitle>\n            <CardDescription className=\"text-center\">\n              Create your account to start the Winter Arc transformation\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"Enter your full name\"\n                  value={formData.fullName}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-fullname\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Choose a username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-username\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-email\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Create a password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-password\"\n                  className=\"h-12\"\n                  minLength={6}\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 hover-elevate active-elevate-2\"\n                disabled={isLoading}\n                data-testid=\"button-submit-signup\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating account...\n                  </>\n                ) : (\n                  \"Create Account\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Already have an account? </span>\n              <Link href=\"/login\">\n                <a className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                  Sign in\n                </a>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center\">\n          <Link href=\"/\">\n            <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-back-home\">\n              ← Back to home\n            </a>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5979},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users, BookOpen, Target, TrendingUp, BarChart3 } from \"lucide-react\";\n\ninterface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalJournals: number;\n  totalChallenges: number;\n  averageProgress: number;\n  recentActivity: {\n    date: string;\n    journals: number;\n    signups: number;\n  }[];\n}\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  if (isLoading || !stats) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-admin-title\">\n          Admin Dashboard\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Overview of program metrics and user activity\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-md hover-elevate transition-all\" data-testid=\"card-total-users\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Users</p>\n                <p className=\"text-3xl font-bold\">{stats.totalUsers}</p>\n              </div>\n              <div className=\"p-3 rounded-xl bg-primary/10\">\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-md hover-elevate transition-all\" data-testid=\"card-active-users\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Active This Week</p>\n                <p className=\"text-3xl font-bold\">{stats.activeUsers}</p>\n              </div>\n              <div className=\"p-3 rounded-xl bg-chart-1/10\">\n                <TrendingUp className=\"h-8 w-8 text-chart-1\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-md hover-elevate transition-all\" data-testid=\"card-journals\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Journals</p>\n                <p className=\"text-3xl font-bold\">{stats.totalJournals}</p>\n              </div>\n              <div className=\"p-3 rounded-xl bg-chart-2/10\">\n                <BookOpen className=\"h-8 w-8 text-chart-2\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-md hover-elevate transition-all\" data-testid=\"card-avg-progress\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Avg Progress</p>\n                <p className=\"text-3xl font-bold\">{Math.round(stats.averageProgress)}%</p>\n              </div>\n              <div className=\"p-3 rounded-xl bg-chart-3/10\">\n                <BarChart3 className=\"h-8 w-8 text-chart-3\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle>Recent Activity (Last 7 Days)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {stats.recentActivity.map((activity, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 rounded-lg bg-muted/30\">\n                <div>\n                  <p className=\"font-medium\">{new Date(activity.date).toLocaleDateString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {activity.journals} journals, {activity.signups} new signups\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4745},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  try {\n    // Create admin user\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    const [admin] = await db.insert(schema.users).values({\n      username: \"admin\",\n      email: \"admin@arcane arc.com\",\n      password: hashedPassword,\n      fullName: \"Admin User\",\n      role: \"admin\",\n    }).onConflictDoNothing().returning();\n\n    console.log(\"✅ Admin user created:\", admin?.username || \"already exists\");\n\n    // Create 8 weeks\n    const weekData = [\n      {\n        weekNumber: 1,\n        title: \"Self Reflection\",\n        description: \"Begin your journey with deep self-discovery and understanding your current state.\",\n        icon: \"Target\",\n        color: \"#FFD700\",\n      },\n      {\n        weekNumber: 2,\n        title: \"Skill Growth\",\n        description: \"Identify skills you want to develop and create a learning roadmap.\",\n        icon: \"BookOpen\",\n        color: \"#4DD0E1\",\n      },\n      {\n        weekNumber: 3,\n        title: \"Physical Health\",\n        description: \"Build sustainable fitness habits and optimize your physical well-being.\",\n        icon: \"Dumbbell\",\n        color: \"#7C4DFF\",\n      },\n      {\n        weekNumber: 4,\n        title: \"Mind & Spirit\",\n        description: \"Cultivate mental clarity through mindfulness and spiritual practices.\",\n        icon: \"Brain\",\n        color: \"#AB47BC\",\n      },\n      {\n        weekNumber: 5,\n        title: \"Knowledge Expansion\",\n        description: \"Broaden your horizons with new ideas, books, and perspectives.\",\n        icon: \"Sparkles\",\n        color: \"#FF7043\",\n      },\n      {\n        weekNumber: 6,\n        title: \"Career Growth\",\n        description: \"Advance your professional goals and clarify your career vision.\",\n        icon: \"Briefcase\",\n        color: \"#FFD700\",\n      },\n      {\n        weekNumber: 7,\n        title: \"Relationships\",\n        description: \"Strengthen connections and build meaningful relationships.\",\n        icon: \"Heart\",\n        color: \"#4DD0E1\",\n      },\n      {\n        weekNumber: 8,\n        title: \"Integration & Celebration\",\n        description: \"Integrate all learnings and celebrate your transformation.\",\n        icon: \"Trophy\",\n        color: \"#FFD700\",\n      },\n    ];\n\n    for (const week of weekData) {\n      await db.insert(schema.weeks).values(week).onConflictDoNothing();\n    }\n\n    console.log(\"✅ 8 weeks created\");\n\n    // Create sample challenges for week 1\n    const [week1] = await db.select().from(schema.weeks).where(eq(schema.weeks.weekNumber, 1));\n\n    if (week1 && admin) {\n      const challengeData = [\n        {\n          weekId: week1.id,\n          title: \"Complete your self-assessment\",\n          description: \"Take 30 minutes to honestly evaluate your current state across all life areas.\",\n          type: \"daily\",\n          createdBy: admin.id,\n        },\n        {\n          weekId: week1.id,\n          title: \"Define your core values\",\n          description: \"List your top 5 core values that will guide your transformation journey.\",\n          type: \"daily\",\n          createdBy: admin.id,\n        },\n        {\n          weekId: week1.id,\n          title: \"Set 8-week goals\",\n          description: \"Write down 3-5 specific, measurable goals you want to achieve by the end of the program.\",\n          type: \"weekly\",\n          createdBy: admin.id,\n        },\n      ];\n\n      for (const challenge of challengeData) {\n        await db.insert(schema.challenges).values(challenge).onConflictDoNothing();\n      }\n\n      console.log(\"✅ Sample challenges created for Week 1\");\n    }\n\n    // Create sample resources\n    const resourceData = [\n      {\n        title: \"Atomic Habits by James Clear\",\n        description: \"Learn how tiny changes can lead to remarkable results in building better habits.\",\n        category: \"Self-Discipline\",\n        type: \"article\",\n        url: \"https://jamesclear.com/atomic-habits\",\n        createdBy: admin?.id || \"\",\n      },\n      {\n        title: \"The Power of Now by Eckhart Tolle\",\n        description: \"A guide to spiritual enlightenment and living in the present moment.\",\n        category: \"Mindfulness\",\n        type: \"article\",\n        url: \"https://www.eckharttolle.com/the-power-of-now/\",\n        createdBy: admin?.id || \"\",\n      },\n      {\n        title: \"Fitness Fundamentals\",\n        description: \"A comprehensive guide to building a sustainable exercise routine.\",\n        category: \"Health\",\n        type: \"video\",\n        url: \"https://www.youtube.com/watch?v=example\",\n        createdBy: admin?.id || \"\",\n      },\n    ];\n\n    if (admin) {\n      for (const resource of resourceData) {\n        await db.insert(schema.resources).values(resource).onConflictDoNothing();\n      }\n      console.log(\"✅ Sample resources created\");\n    }\n\n    // Create welcome announcement\n    if (admin) {\n      await db.insert(schema.announcements).values({\n        title: \"Welcome to Arcane Arc! ❄️\",\n        content: \"Your transformation journey begins today. Remember to journal daily, complete your weekly challenges, and connect with the community. We're here to support you every step of the way!\",\n        createdBy: admin.id,\n      }).onConflictDoNothing();\n\n      console.log(\"✅ Welcome announcement created\");\n    }\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\nseed()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n","size_bytes":5713},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Snowflake } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-sidebar text-sidebar-foreground border-t border-sidebar-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Snowflake className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-serif text-lg font-bold\">Arcane Arc</span>\n            </div>\n            <p className=\"text-sm text-sidebar-foreground/80\">\n              Transform your winter into a journey of growth, reflection, and achievement.\n            </p>\n          </div>\n\n          {/* About */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">About</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/about\">\n                  <a className=\"text-sidebar-foreground/80 hover:text-primary transition-colors\" data-testid=\"link-footer-about\">\n                    Our Philosophy\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/program\">\n                  <a className=\"text-sidebar-foreground/80 hover:text-primary transition-colors\" data-testid=\"link-footer-program\">\n                    How It Works\n                  </a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Program */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">Program</h3>\n            <ul className=\"space-y-2 text-sm text-sidebar-foreground/80\">\n              <li>8-Week Journey</li>\n              <li>Daily Reflection</li>\n              <li>Weekly Challenges</li>\n              <li>Community Support</li>\n            </ul>\n          </div>\n\n          {/* Resources */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">Resources</h3>\n            <ul className=\"space-y-2 text-sm text-sidebar-foreground/80\">\n              <li>Learning Hub</li>\n              <li>Achievement Badges</li>\n              <li>Progress Tracking</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"mt-8 pt-8 border-t border-sidebar-border text-center text-sm text-sidebar-foreground/70\">\n          <p>&copy; {new Date().getFullYear()} Arcane Arc Program. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2519},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"user\" or \"admin\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  currentWeek: integer(\"current_week\").default(1).notNull(), // 1-8\n  streak: integer(\"streak\").default(0).notNull(),\n  totalJournals: integer(\"total_journals\").default(0).notNull(),\n});\n\n// Program weeks\nexport const weeks = pgTable(\"weeks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  weekNumber: integer(\"week_number\").notNull().unique(), // 1-8\n  title: text(\"title\").notNull(), // e.g., \"Self Reflection\"\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(), // lucide icon name\n  color: text(\"color\").notNull(), // hex color for theme\n});\n\n// Challenges\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  weekId: varchar(\"week_id\").references(() => weeks.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // \"daily\" or \"weekly\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n});\n\n// User progress on challenges\nexport const userChallenges = pgTable(\"user_challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  challengeId: varchar(\"challenge_id\").references(() => challenges.id).notNull(),\n  completed: boolean(\"completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Journal entries\nexport const journals = pgTable(\"journals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  achievement: text(\"achievement\"),\n  challenge: text(\"challenge\"),\n  gratitude: text(\"gratitude\"),\n  mood: text(\"mood\"), // \"great\", \"good\", \"okay\", \"challenging\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Learning resources\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // \"Self-Discipline\", \"Health\", \"Business\", \"Mindfulness\"\n  type: text(\"type\").notNull(), // \"video\", \"pdf\", \"article\"\n  url: text(\"url\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n});\n\n// Announcements\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n});\n\n// Achievements/Badges\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(), // lucide icon name\n  criteria: jsonb(\"criteria\").notNull(), // { type: \"journals\", count: 7 }\n});\n\n// User achievements\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  achievementId: varchar(\"achievement_id\").references(() => achievements.id).notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow().notNull(),\n});\n\n// User progress tracking\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  weekId: varchar(\"week_id\").references(() => weeks.id).notNull(),\n  completed: boolean(\"completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  journals: many(journals),\n  userChallenges: many(userChallenges),\n  userAchievements: many(userAchievements),\n  userProgress: many(userProgress),\n  createdChallenges: many(challenges),\n  createdResources: many(resources),\n  createdAnnouncements: many(announcements),\n}));\n\nexport const weeksRelations = relations(weeks, ({ many }) => ({\n  challenges: many(challenges),\n  userProgress: many(userProgress),\n}));\n\nexport const challengesRelations = relations(challenges, ({ one, many }) => ({\n  week: one(weeks, {\n    fields: [challenges.weekId],\n    references: [weeks.id],\n  }),\n  createdBy: one(users, {\n    fields: [challenges.createdBy],\n    references: [users.id],\n  }),\n  userChallenges: many(userChallenges),\n}));\n\nexport const journalsRelations = relations(journals, ({ one }) => ({\n  user: one(users, {\n    fields: [journals.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const resourcesRelations = relations(resources, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [resources.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const announcementsRelations = relations(announcements, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [announcements.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userChallengesRelations = relations(userChallenges, ({ one }) => ({\n  user: one(users, {\n    fields: [userChallenges.userId],\n    references: [users.id],\n  }),\n  challenge: one(challenges, {\n    fields: [userChallenges.challengeId],\n    references: [challenges.id],\n  }),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [userProgress.userId],\n    references: [users.id],\n  }),\n  week: one(weeks, {\n    fields: [userProgress.weekId],\n    references: [weeks.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  fullName: true,\n});\n\nexport const insertWeekSchema = createInsertSchema(weeks).omit({\n  id: true,\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJournalSchema = createInsertSchema(journals).omit({\n  id: true,\n  createdAt: true,\n  date: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n});\n\nexport const insertUserChallengeSchema = createInsertSchema(userChallenges).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  completedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Week = typeof weeks.$inferSelect;\nexport type InsertWeek = z.infer<typeof insertWeekSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type Journal = typeof journals.$inferSelect;\nexport type InsertJournal = z.infer<typeof insertJournalSchema>;\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type UserChallenge = typeof userChallenges.$inferSelect;\nexport type InsertUserChallenge = z.infer<typeof insertUserChallengeSchema>;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n","size_bytes":9143},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/Landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { PublicHeader } from \"@/components/PublicHeader\";\nimport { Footer } from \"@/components/Footer\";\nimport heroImage from \"@assets/generated_images/Mountain_sunrise_aurora_hero_37a6693b.png\";\nimport mentorImage from \"@assets/generated_images/Professional_mentor_portrait_eb94b154.png\";\nimport {\n  Target,\n  BookOpen,\n  Dumbbell,\n  Brain,\n  Briefcase,\n  Heart,\n  Flame,\n  Trophy,\n  Users,\n  ArrowRight,\n  CheckCircle2,\n  Sparkles,\n} from \"lucide-react\";\n\nconst weeklyThemes = [\n  { week: 1, title: \"Self Reflection\", icon: Target, color: \"text-chart-1\" },\n  { week: 2, title: \"Skill Growth\", icon: BookOpen, color: \"text-chart-2\" },\n  { week: 3, title: \"Physical Health\", icon: Dumbbell, color: \"text-chart-3\" },\n  { week: 4, title: \"Mind & Spirit\", icon: Brain, color: \"text-chart-4\" },\n  { week: 5, title: \"Knowledge\", icon: Sparkles, color: \"text-chart-5\" },\n  { week: 6, title: \"Career\", icon: Briefcase, color: \"text-chart-1\" },\n  { week: 7, title: \"Relationship\", icon: Heart, color: \"text-chart-2\" },\n  { week: 8, title: \"Integration\", icon: Trophy, color: \"text-primary\" },\n];\n\nconst features = [\n  {\n    icon: Target,\n    title: \"Set Goals\",\n    description: \"Define clear, actionable goals for your 8-week transformation journey\",\n  },\n  {\n    icon: Flame,\n    title: \"Track Progress\",\n    description: \"Build streaks and see your growth visualized with beautiful progress charts\",\n  },\n  {\n    icon: BookOpen,\n    title: \"Daily Reflection\",\n    description: \"Journal your achievements, challenges, and gratitude every single day\",\n  },\n  {\n    icon: Trophy,\n    title: \"Earn Badges\",\n    description: \"Unlock achievements as you complete challenges and reach milestones\",\n  },\n  {\n    icon: Brain,\n    title: \"Learn & Grow\",\n    description: \"Access curated resources on self-discipline, health, business, and mindfulness\",\n  },\n  {\n    icon: Users,\n    title: \"Community\",\n    description: \"Connect with others on the same transformative journey\",\n  },\n];\n\nconst testimonials = [\n  {\n    name: \"Sarah Chen\",\n    role: \"Software Engineer\",\n    content: \"The Winter Arc changed my life. The daily reflection kept me accountable, and I finally built the habits I've been dreaming about for years.\",\n    avatar: \"SC\",\n  },\n  {\n    name: \"Michael Torres\",\n    role: \"Entrepreneur\",\n    content: \"This program gave me structure and clarity. The weekly themes helped me focus on what truly matters. I'm now in the best shape of my life, mentally and physically.\",\n    avatar: \"MT\",\n  },\n  {\n    name: \"Emma Williams\",\n    role: \"Designer\",\n    content: \"I loved the combination of challenge tracking and journaling. Seeing my streak grow motivated me every single day. Highly recommend!\",\n    avatar: \"EW\",\n  },\n];\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PublicHeader />\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        <div\n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{\n            backgroundImage: `url(${heroImage})`,\n          }}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-b from-background/90 via-background/70 to-background\" />\n        </div>\n\n        <div className=\"relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center py-20\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 mb-8\">\n            <Sparkles className=\"h-4 w-4 text-primary\" />\n            <span className=\"text-sm font-medium text-primary\">Winter Arc 2025</span>\n          </div>\n\n          <h1 className=\"font-serif text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-bold mb-6 tracking-tight\" data-testid=\"text-hero-title\">\n            Unlock Your Winter Potential\n          </h1>\n\n          <p className=\"text-xl sm:text-2xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Transform your winter into a journey of reflection, discipline, and growth.\n            Join thousands on the path to becoming your best self.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Link href=\"/signup\">\n              <a>\n                <Button size=\"lg\" className=\"text-lg px-8 h-14 w-full sm:w-auto hover-elevate active-elevate-2\" data-testid=\"button-hero-join\">\n                  Join the Arcane Arc Now\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </a>\n            </Link>\n            <Link href=\"/program\">\n              <a>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"text-lg px-8 h-14 w-full sm:w-auto backdrop-blur-sm bg-background/30 hover-elevate active-elevate-2\"\n                  data-testid=\"button-hero-learn\"\n                >\n                  Learn More\n                </Button>\n              </a>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"absolute bottom-8 left-1/2 -translate-x-1/2 animate-bounce\">\n          <div className=\"w-6 h-10 border-2 border-foreground/30 rounded-full flex items-start justify-center p-2\">\n            <div className=\"w-1 h-2 bg-foreground/30 rounded-full\" />\n          </div>\n        </div>\n      </section>\n\n      {/* 8-Week Program Overview */}\n      <section className=\"py-20 md:py-24 lg:py-32 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\" data-testid=\"text-program-title\">\n              Your 8-Week Transformation\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Each week focuses on a core pillar of personal growth, building a holistic transformation\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {weeklyThemes.map((theme) => {\n              const Icon = theme.icon;\n              return (\n                <Card\n                  key={theme.week}\n                  className=\"hover-elevate transition-all duration-300 overflow-visible\"\n                  data-testid={`card-week-${theme.week}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col items-center text-center\">\n                      <div className={`p-4 rounded-2xl bg-card mb-4 ${theme.color}`}>\n                        <Icon className=\"h-8 w-8\" />\n                      </div>\n                      <div className=\"text-sm font-medium text-muted-foreground mb-1\">\n                        Week {theme.week}\n                      </div>\n                      <h3 className=\"text-lg font-semibold\">{theme.title}</h3>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 md:py-24 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\">\n              Everything You Need to Succeed\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              A comprehensive platform designed to support your transformation journey\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-feature-${index}`}>\n                  <CardContent className=\"p-8\">\n                    <div className=\"p-3 rounded-xl bg-primary/10 w-fit mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 md:py-24 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-4\">\n              Success Stories\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Join thousands who have transformed their lives through the Winter Arc\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-testimonial-${index}`}>\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <span className=\"font-semibold text-primary\">{testimonial.avatar}</span>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">{testimonial.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{testimonial.role}</div>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground italic\">&ldquo;{testimonial.content}&rdquo;</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Meet the Mentor */}\n      <section className=\"py-20 md:py-24 bg-muted/30\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"order-2 lg:order-1\">\n              <h2 className=\"font-serif text-4xl md:text-5xl font-semibold mb-6\">\n                Meet the Mentor: Ashik\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                With years of experience in personal development and transformation coaching,\n                Ashik has helped thousands of individuals unlock their true potential through\n                structured programs and mindful reflection.\n              </p>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle2 className=\"h-5 w-5 text-primary mt-1 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">\n                    Certified life coach specializing in seasonal transformation programs\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle2 className=\"h-5 w-5 text-primary mt-1 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">\n                    10+ years guiding individuals through personal growth journeys\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle2 className=\"h-5 w-5 text-primary mt-1 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">\n                    Creator of the Winter Arc methodology combining discipline and reflection\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"order-1 lg:order-2\">\n              <div className=\"rounded-2xl overflow-hidden shadow-xl\">\n                <img\n                  src={mentorImage}\n                  alt=\"Ashik - Mentor and Guide\"\n                  className=\"w-full h-auto object-cover\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Final CTA */}\n      <section className=\"py-20 md:py-32 bg-gradient-to-br from-primary/10 to-secondary/10\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"font-serif text-4xl md:text-5xl lg:text-6xl font-bold mb-6\">\n            Ready to Transform Your Winter?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join the Arcane Arc Program today and embark on your 8-week journey to becoming\n            your best self.\n          </p>\n          <Link href=\"/signup\">\n            <a>\n              <Button size=\"lg\" className=\"text-lg px-8 h-14 hover-elevate active-elevate-2\" data-testid=\"button-cta-join\">\n                Start Your Journey Now\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </a>\n          </Link>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13310},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { eq, desc } from \"drizzle-orm\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || \"arcane-arc-secret-key\";\n\n// Middleware to verify JWT token\nfunction authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: \"Invalid or expired token\" });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// Middleware to check if user is admin\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (req.user.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ====================\n  // AUTH ROUTES\n  // ====================\n\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { username, email, password, fullName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        fullName,\n      });\n\n      // Generate JWT token\n      const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Login failed\" });\n    }\n  });\n\n  // ====================\n  // USER DASHBOARD ROUTES\n  // ====================\n\n  app.get(\"/api/dashboard\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      const weeks = await storage.getAllWeeks();\n      const todayJournal = await storage.getTodayJournal(req.user.id);\n      const recentJournals = (await storage.getJournalsByUser(req.user.id)).slice(0, 5);\n      const announcements = await storage.getRecentAnnouncements(5);\n\n      // Get user challenges with challenge details\n      const userChallenges = await storage.getUserChallengesByUser(req.user.id);\n      const activeChallenges = await Promise.all(\n        userChallenges.map(async (uc) => {\n          const challenge = await storage.getChallenge(uc.challengeId);\n          return { ...uc, challenge };\n        })\n      );\n\n      res.json({\n        user,\n        weeks,\n        todayJournal,\n        recentJournals,\n        activeChallenges: activeChallenges.filter(ac => ac.challenge),\n        announcements,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to load dashboard\" });\n    }\n  });\n\n  // ====================\n  // JOURNAL ROUTES\n  // ====================\n\n  app.get(\"/api/journals\", authenticateToken, async (req, res) => {\n    try {\n      const journals = await storage.getJournalsByUser(req.user.id);\n      res.json(journals);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/journals/today\", authenticateToken, async (req, res) => {\n    try {\n      const journal = await storage.getTodayJournal(req.user.id);\n      res.json(journal);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/journals\", authenticateToken, async (req, res) => {\n    try {\n      // Check if already journaled today\n      const todayJournal = await storage.getTodayJournal(req.user.id);\n      if (todayJournal) {\n        return res.status(400).json({ message: \"You've already journaled today\" });\n      }\n\n      const journal = await storage.createJournal({\n        userId: req.user.id,\n        ...req.body,\n      });\n\n      // Update user stats\n      await storage.incrementUserJournals(req.user.id);\n      // Update streak logic can be added here\n\n      res.json(journal);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to create journal\" });\n    }\n  });\n\n  // ====================\n  // CHALLENGE ROUTES\n  // ====================\n\n  app.get(\"/api/challenges/user\", authenticateToken, async (req, res) => {\n    try {\n      const challenges = await storage.getAllChallenges();\n      const weeks = await storage.getAllWeeks();\n\n      const challengesWithStatus = await Promise.all(\n        challenges.map(async (challenge) => {\n          const userChallenge = await storage.getUserChallenge(req.user.id, challenge.id);\n          const week = weeks.find(w => w.id === challenge.weekId);\n          return { ...challenge, userChallenge, week };\n        })\n      );\n\n      res.json(challengesWithStatus);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/challenges/:challengeId/toggle\", authenticateToken, async (req, res) => {\n    try {\n      const { challengeId } = req.params;\n      let userChallenge = await storage.getUserChallenge(req.user.id, challengeId);\n\n      if (!userChallenge) {\n        // Create new user challenge\n        userChallenge = await storage.createUserChallenge({\n          userId: req.user.id,\n          challengeId,\n          completed: true,\n        });\n        await storage.updateUserChallenge(userChallenge.id, true, new Date());\n      } else {\n        // Toggle completion\n        const newCompleted = !userChallenge.completed;\n        await storage.updateUserChallenge(\n          userChallenge.id,\n          newCompleted,\n          newCompleted ? new Date() : null\n        );\n      }\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ====================\n  // RESOURCES ROUTES\n  // ====================\n\n  app.get(\"/api/resources\", authenticateToken, async (req, res) => {\n    try {\n      const resources = await storage.getAllResources();\n      res.json(resources);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ====================\n  // PROFILE ROUTES\n  // ====================\n\n  app.get(\"/api/profile\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      const userAchievements = await storage.getUserAchievements(req.user.id);\n      const achievements = await storage.getAllAchievements();\n\n      const achievementsWithDetails = userAchievements.map(ua => {\n        const achievement = achievements.find(a => a.id === ua.achievementId);\n        return { ...ua, achievement };\n      }).filter(a => a.achievement);\n\n      const completedWeeks = await storage.getCompletedWeeksCount(req.user.id);\n      const completedChallenges = await storage.getCompletedChallengesCount(req.user.id);\n\n      res.json({\n        user,\n        achievements: achievementsWithDetails,\n        stats: {\n          completedWeeks,\n          completedChallenges,\n          longestStreak: user?.streak || 0,\n        },\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ====================\n  // WEEKS ROUTES\n  // ====================\n\n  app.get(\"/api/weeks\", authenticateToken, async (req, res) => {\n    try {\n      const weeks = await storage.getAllWeeks();\n      res.json(weeks);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ====================\n  // ADMIN ROUTES\n  // ====================\n\n  app.get(\"/api/admin/stats\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const totalJournals = await storage.getTotalJournalsCount();\n      const challenges = await storage.getAllChallenges();\n\n      // Get active users (journaled in last 7 days)\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      const activeUsers = await storage.getActiveUsers(weekAgo);\n\n      // Calculate average progress\n      const avgProgress = users.length > 0\n        ? users.reduce((sum, u) => sum + (u.currentWeek / 8) * 100, 0) / users.length\n        : 0;\n\n      // Recent activity (last 7 days)\n      const recentActivity = [];\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        date.setHours(0, 0, 0, 0);\n        recentActivity.push({\n          date: date.toISOString(),\n          journals: 0, // Simplified for MVP\n          signups: 0,\n        });\n      }\n\n      res.json({\n        totalUsers: users.length,\n        activeUsers: activeUsers.length,\n        totalJournals,\n        totalChallenges: challenges.length,\n        averageProgress: avgProgress,\n        recentActivity,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove passwords from response\n      const safeUsers = users.map(({ password, ...user }) => user);\n      res.json(safeUsers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/challenges\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const challenges = await storage.getAllChallenges();\n      const weeks = await storage.getAllWeeks();\n\n      const challengesWithWeek = challenges.map(challenge => {\n        const week = weeks.find(w => w.id === challenge.weekId);\n        return { ...challenge, week };\n      });\n\n      res.json(challengesWithWeek);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/challenges\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const challenge = await storage.createChallenge({\n        ...req.body,\n        createdBy: req.user.id,\n      });\n      res.json(challenge);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to create challenge\" });\n    }\n  });\n\n  app.get(\"/api/admin/announcements\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const announcements = await storage.getAllAnnouncements();\n      res.json(announcements);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/announcements\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const announcement = await storage.createAnnouncement({\n        ...req.body,\n        createdBy: req.user.id,\n      });\n      res.json(announcement);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to create announcement\" });\n    }\n  });\n\n  app.get(\"/api/admin/resources\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const resources = await storage.getAllResources();\n      res.json(resources);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/resources\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const resource = await storage.createResource({\n        ...req.body,\n        createdBy: req.user.id,\n      });\n      res.json(resource);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to create resource\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13200},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/Challenges.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Target, CheckCircle2, Circle, Calendar } from \"lucide-react\";\nimport { Challenge, UserChallenge, Week } from \"@shared/schema\";\n\ninterface ChallengeWithStatus extends Challenge {\n  userChallenge?: UserChallenge;\n  week: Week;\n}\n\nexport default function Challenges() {\n  const { toast } = useToast();\n\n  const { data: challenges, isLoading } = useQuery<ChallengeWithStatus[]>({\n    queryKey: [\"/api/challenges/user\"],\n  });\n\n  const toggleMutation = useMutation({\n    mutationFn: async (challengeId: string) => {\n      return await apiRequest(\"POST\", `/api/challenges/${challengeId}/toggle`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Challenge updated!\",\n        description: \"Your progress has been saved.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  const activeChallenges = challenges?.filter(c => !c.userChallenge?.completed) || [];\n  const completedChallenges = challenges?.filter(c => c.userChallenge?.completed) || [];\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-challenges-title\">\n          Challenges\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Complete challenges to build momentum and earn achievements\n        </p>\n      </div>\n\n      {/* Active Challenges */}\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\n          <Target className=\"h-6 w-6 text-primary\" />\n          Active Challenges\n        </h2>\n\n        {activeChallenges.length > 0 ? (\n          <div className=\"space-y-4\">\n            {activeChallenges.map((challenge) => (\n              <Card key={challenge.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-challenge-${challenge.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <Checkbox\n                      checked={false}\n                      onCheckedChange={() => toggleMutation.mutate(challenge.id)}\n                      className=\"mt-1\"\n                      data-testid={`checkbox-challenge-${challenge.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold\">{challenge.title}</h3>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <span className=\"text-xs px-2 py-1 rounded-full bg-primary/10 text-primary font-medium\">\n                              Week {challenge.week.weekNumber}\n                            </span>\n                            <span className=\"text-xs px-2 py-1 rounded-full bg-muted capitalize\">\n                              {challenge.type}\n                            </span>\n                          </div>\n                        </div>\n                        <Circle className=\"h-5 w-5 text-muted-foreground\" />\n                      </div>\n                      <p className=\"text-muted-foreground\">{challenge.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No active challenges. Check back soon for new ones!</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Completed Challenges */}\n      {completedChallenges.length > 0 && (\n        <div>\n          <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\n            <CheckCircle2 className=\"h-6 w-6 text-chart-1\" />\n            Completed Challenges\n          </h2>\n\n          <div className=\"space-y-4\">\n            {completedChallenges.map((challenge) => (\n              <Card key={challenge.id} className=\"opacity-75\" data-testid={`card-completed-${challenge.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <Checkbox\n                      checked={true}\n                      onCheckedChange={() => toggleMutation.mutate(challenge.id)}\n                      className=\"mt-1\"\n                      data-testid={`checkbox-completed-${challenge.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold line-through\">{challenge.title}</h3>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <span className=\"text-xs px-2 py-1 rounded-full bg-primary/10 text-primary font-medium\">\n                              Week {challenge.week.weekNumber}\n                            </span>\n                            <span className=\"text-xs px-2 py-1 rounded-full bg-muted capitalize\">\n                              {challenge.type}\n                            </span>\n                          </div>\n                        </div>\n                        <CheckCircle2 className=\"h-5 w-5 text-chart-1\" />\n                      </div>\n                      <p className=\"text-muted-foreground\">{challenge.description}</p>\n                      {challenge.userChallenge?.completedAt && (\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Completed on {new Date(challenge.userChallenge.completedAt).toLocaleDateString()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6870},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Snowflake, Loader2 } from \"lucide-react\";\nimport { setAuthState } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await apiRequest(\"POST\", \"/api/auth/login\", formData);\n      setAuthState(result.user, result.token);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in to your account.\",\n      });\n\n      // Redirect based on role\n      if (result.user.role === \"admin\") {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/dashboard\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <a className=\"inline-flex items-center gap-2 hover-elevate rounded-lg px-3 py-2\">\n              <Snowflake className=\"h-10 w-10 text-primary\" />\n              <span className=\"font-serif text-2xl font-bold\">Arcane Arc</span>\n            </a>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your credentials to access your transformation journey\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-username\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-password\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 hover-elevate active-elevate-2\"\n                disabled={isLoading}\n                data-testid=\"button-submit-login\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Don't have an account? </span>\n              <Link href=\"/signup\">\n                <a className=\"text-primary hover:underline font-medium\" data-testid=\"link-signup\">\n                  Join the program\n                </a>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center\">\n          <Link href=\"/\">\n            <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-back-home\">\n              ← Back to home\n            </a>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4909},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 210 15% 15%;\n\n  --border: 210 12% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 210 15% 15%;\n\n  --card-border: 210 10% 90%;\n\n  --sidebar: 210 45% 12%;\n\n  --sidebar-foreground: 180 25% 92%;\n\n  --sidebar-border: 210 35% 18%;\n\n  --sidebar-primary: 45 100% 50%;\n\n  --sidebar-primary-foreground: 210 50% 8%;\n\n  --sidebar-accent: 210 35% 18%;\n\n  --sidebar-accent-foreground: 180 25% 92%;\n\n  --sidebar-ring: 45 100% 50%;\n\n  --popover: 210 15% 94%;\n\n  --popover-foreground: 210 15% 15%;\n\n  --popover-border: 210 12% 84%;\n\n  --primary: 45 100% 50%;\n\n  --primary-foreground: 210 50% 8%;\n\n  --secondary: 180 45% 50%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 210 15% 92%;\n\n  --muted-foreground: 210 8% 45%;\n\n  --accent: 180 45% 88%;\n\n  --accent-foreground: 210 40% 12%;\n\n  --destructive: 0 72% 38%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 210 12% 72%;\n  --ring: 210 80% 42%;\n  --chart-1: 45 100% 50%;\n  --chart-2: 180 45% 50%;\n  --chart-3: 210 75% 55%;\n  --chart-4: 270 65% 60%;\n  --chart-5: 30 85% 55%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: \"Playfair Display\", Georgia, serif;\n  --font-mono: Menlo, Monaco, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 10% 15% / 0.04);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 10% 15% / 0.06);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 10% 15% / 0.08), 0px 1px 2px -1px hsl(210 10% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(210 10% 15% / 0.08), 0px 2px 4px -2px hsl(210 10% 15% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(210 10% 15% / 0.10), 0px 3px 6px -3px hsl(210 10% 15% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(210 10% 15% / 0.12), 0px 4px 8px -4px hsl(210 10% 15% / 0.08);\n  --shadow-xl: 0px 20px 40px -8px hsl(210 10% 15% / 0.14), 0px 8px 16px -6px hsl(210 10% 15% / 0.10);\n  --shadow-2xl: 0px 30px 60px -12px hsl(210 10% 15% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 50% 6%;\n\n  --foreground: 180 25% 92%;\n\n  --border: 210 35% 18%;\n\n  --card: 210 45% 10%;\n\n  --card-foreground: 180 25% 92%;\n\n  --card-border: 210 35% 16%;\n\n  --sidebar: 210 50% 8%;\n\n  --sidebar-foreground: 180 25% 92%;\n\n  --sidebar-border: 210 40% 15%;\n\n  --sidebar-primary: 45 100% 50%;\n\n  --sidebar-primary-foreground: 210 50% 8%;\n\n  --sidebar-accent: 210 35% 18%;\n\n  --sidebar-accent-foreground: 180 25% 92%;\n\n  --sidebar-ring: 45 100% 50%;\n\n  --popover: 210 45% 12%;\n\n  --popover-foreground: 180 25% 92%;\n\n  --popover-border: 210 35% 20%;\n\n  --primary: 45 100% 50%;\n\n  --primary-foreground: 210 50% 8%;\n\n  --secondary: 180 45% 50%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 210 35% 18%;\n\n  --muted-foreground: 210 15% 60%;\n\n  --accent: 180 45% 25%;\n\n  --accent-foreground: 180 25% 92%;\n\n  --destructive: 0 68% 42%;\n\n  --destructive-foreground: 0 8% 98%;\n\n  --input: 210 10% 32%;\n  --ring: 210 75% 48%;\n  --chart-1: 45 100% 60%;\n  --chart-2: 180 45% 60%;\n  --chart-3: 210 70% 65%;\n  --chart-4: 270 65% 68%;\n  --chart-5: 30 85% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 10% 4% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 10% 4% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 10% 4% / 0.30), 0px 1px 2px -1px hsl(210 10% 4% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(210 10% 4% / 0.35), 0px 2px 4px -2px hsl(210 10% 4% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(210 10% 4% / 0.40), 0px 3px 6px -3px hsl(210 10% 4% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(210 10% 4% / 0.45), 0px 4px 8px -4px hsl(210 10% 4% / 0.35);\n  --shadow-xl: 0px 20px 40px -8px hsl(210 10% 4% / 0.50), 0px 8px 16px -6px hsl(210 10% 4% / 0.40);\n  --shadow-2xl: 0px 30px 60px -12px hsl(210 10% 4% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11456},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/pages/AdminAnnouncements.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { MessageSquare, Plus } from \"lucide-react\";\nimport { Announcement } from \"@shared/schema\";\n\nexport default function AdminAnnouncements() {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    content: \"\",\n  });\n\n  const { data: announcements, isLoading } = useQuery<Announcement[]>({\n    queryKey: [\"/api/admin/announcements\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/announcements\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/announcements\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Announcement posted!\",\n        description: \"The announcement is now visible to all users.\",\n      });\n      setFormData({ title: \"\", content: \"\" });\n      setShowForm(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 md:p-8 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 md:p-8 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-announcements-title\">\n            Announcements\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Post updates and messages to all program members\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowForm(!showForm)}\n          className=\"hover-elevate active-elevate-2\"\n          data-testid=\"button-create-announcement\"\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          New Announcement\n        </Button>\n      </div>\n\n      {/* Create Form */}\n      {showForm && (\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>New Announcement</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                createMutation.mutate();\n              }}\n              className=\"space-y-4\"\n            >\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Enter announcement title\"\n                  required\n                  className=\"h-12\"\n                  data-testid=\"input-announcement-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content\">Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={formData.content}\n                  onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                  placeholder=\"Write your announcement...\"\n                  required\n                  className=\"min-h-32\"\n                  data-testid=\"input-announcement-content\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 hover-elevate active-elevate-2\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-announcement\"\n                >\n                  {createMutation.isPending ? \"Posting...\" : \"Post Announcement\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowForm(false)}\n                  className=\"hover-elevate active-elevate-2\"\n                  data-testid=\"button-cancel-announcement\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Announcements List */}\n      <div className=\"space-y-4\">\n        {announcements && announcements.length > 0 ? (\n          announcements.map((announcement) => (\n            <Card key={announcement.id} className=\"hover-elevate transition-all shadow-md\" data-testid={`card-announcement-${announcement.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold mb-2\">{announcement.title}</h3>\n                    <p className=\"text-muted-foreground mb-3\">{announcement.content}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Posted on {new Date(announcement.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <MessageSquare className=\"h-6 w-6 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No announcements yet</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6187},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428}},"version":2}